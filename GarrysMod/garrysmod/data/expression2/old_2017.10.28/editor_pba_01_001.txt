@name editor pba 01 001

@inputs 
@outputs OPS
@persist [E O Cam]:entity [Q]:table

@trigger none



#include "old 28.10.2017/PBA001"
if(changed(0)) {
    #include "old 28.10.2017/EGPS"
    
    
    ###############################################################################################################
    ###############################################################################################################  CURSOR
    ###############################################################################################################
    function vector2 cursorPos(Player:entity) {
        ###########################################################################################
        ############################################################################################
        local EyeAngles  = Player:eyeAngles()                                                     ###
        local Eye        = Player:eye()                                                            ###
        if(Q["cam/toggle", number]) {                                                               ##
            Eye = Eye:rotate(angnorm(EyeAngles-Q["cam/ang", angle]))                                ##
        }                                                                                           ##
        if(changed(Eye) | changed(EyeAngles)) {                                                     ##
            local EyeA       = EyeAngles:forward()                                                  ##
            local EgpScrSize = egpScrSize(Player)                                                   ##
                                                                                                    ##
            local Holo = holoEntity(454560)                                                         ##
            if(!Holo) {holoCreate(454560,vec(),vec())}                                              ##
            holoAng(454560, EyeAngles)                                                              ##
                                                                                                    ##
            local Cos = Eye[1] * EyeA[1] + Eye[2] * EyeA[2] + Eye[3] * EyeA[3]                      ##
            local CursorV = (Holo:toLocal(Eye / Cos) / vec(1, -1.332, -0.75) + vec(0, 1, 1)) / 2    ##
                                                                                                    ##
            local Cursor = Q["cursorPos", vector2] = vec2(CursorV[2], CursorV[3]) * EgpScrSize      ##
            return Cursor                                                                          ###
        }                                                                                         ###
        ############################################################################################
        ###########################################################################################
    }
    ###############################################################################################################
    ###############################################################################################################  ACT
    ###############################################################################################################
    function number addAct(Act_n:string, Tag:string) {
        if(!Q[Act_n + "/lock", number]) {
            local Act_i = Q["act", number] = Q["act", number] + 1
            
            Q[Act_i + "/act/name", string] = Act_n
            Q[Act_i + "/act/tag", string] = Tag
            
            Q["acts", array] = Q["acts", array]:add(array(Act_i))
            return Act_i
        }
    }
    function number addAct(Act_n:string) {
        return addAct(Act_n, "")
    }
    ######################################
    ###################################### global inrange
    ######################################
    function number globalInrange(Name:string, CursorPos:vector2) {
        local TargetGP = egpGetGlobalPos(Name)
        local TargetS  = egpGetSize(Name) / 2
        local Inrange = inrange(CursorPos - TargetGP,-TargetS,TargetS)
        
        return Inrange
    }
    ######################################
    ###################################### cursor target
    ######################################
    function cursorTarget(TargetList:string) {
        local CursorPos = Q["cursor", vector2]
        
        if(Q["cursorTarget/end", number]) {
            local CursorTarget = Q["cursorTarget", string]
            if(CursorTarget) {
                if(globalInrange(CursorTarget, CursorPos)) {
                }
                else {
                    Q["cursorTarget/end", number] = 0
                }
            }
        }
        else {
            Q["cursorDown", string] = ""
            local CursorTargets = Q[TargetList, array]
            local Return = ""
            local Real = 0
            while(1) {
                Real++
                local Target = CursorTargets[Real, string]
                if(Target) {
                    if(globalInrange(Target, CursorPos)) {
                        
                        local CursorDown = Q["cursorDown", string]
                        Q["cursorDown", string] = CursorDown + (CursorDown ? "///" : "") + Target
                        
                        Return = Target
                        local Targets = Q[Target + "/cursorTargets", array]
                        if(Targets:count()) {
                            CursorTargets = Targets
                            Real = 0
                        }
                        else {
                            Q["cursorTarget/end", number] = 1
                            Q["cursorTarget", string] = Target
                        }
                    }
                }
                else {
                    local CursorDown = Q["cursorDown", string]
                    Q["cursorTarget/end", number] = 0
                    Q["cursorTarget", string] = Return
                }
            }
        }
    }
    function string cursorTarget() {
        cursorTarget("cursorTargets")
    }
    
    E = entity()
    O = owner()
    
    #Q = gTable(O:steamID() + "editor pba 01 001")
    
    
    O:addPBA()
    
    
    runOnLast(1)
    timer("", 1)
}


if(clk("")) {
        timer("", 50)
    
    if(changed(0)) {
        egpSelect(E:isWeldedTo():wirelink())
        egpClear()
        
        local Indent   = Q["indent"  , number] = 2
        local FontSize = Q["fontSize", number] = 15
        local SCR = egpScrSize(O)
        
        
        local LP_n = "rightPanel"
        local LP_s = v(50, SCR[2]-30)
        local LP_p = (SCR-LP_s/2)
        egpAddBox(LP_n, LP_p, LP_s, "")
        egpSetColor(30)
        
        
        local Name = "bonesPanel"
        local BP_n = Name + "Base"
        local BP_s = v(100, 300)
        local BP_p = v(350,1075-BP_s[2]/2)
        egpAddBox(BP_n, BP_p, BP_s, "")
        egpSetColor(0)
        
        
        
        #print("":replace("[", "v("):replace("]", ")"))
        local Bones_p = array(v(0,0),v(0,-51),v(27,-85),v(-27,-85),v(-37,-36),v(-39,11),v(37,-36),v(39,11),v(18,1),v(18,70),v(0,-111),v(-18,1),v(-18,70),v(-18,150),v(18,150))
        local Color   = array(     2,       2,        1,         3,         3,        3,        1,       1,      1,       1,        2,       3,        3,         3,       1)
        foreach(C, Pos:vector2 = Bones_p) {
            
            egpAddCircle("bone" + C, Pos - v(0,22), v(3), "")
            egpSetParent("bonesPanelBase")
            
            local Color = Color[C, number]
            if(Color == 1) {
                egpSetColor(255,0,0)
            }
            elseif(Color == 2) {
                egpSetColor(0,255,0)
            }
            elseif(Color == 3) {
                egpSetColor(0,0,255)
            }
        }
        egpAddCircle("boneSelect", v(), v(6), "o")
        egpSetParent("bone" + 1)
        egpSetColor(0,80,255)
        
        local Name = "bonesList"
        local BLB_n = Name + "Base"
        local BLB_s = v(150,BP_s[2])
        local BLB_p = BP_p + v((BP_s[1]+BLB_s[1])/2+Indent,0)
        egpAddBox(BLB_n, BLB_p, BLB_s, "")
        egpSetColor(0)
        Q["cursorTargets", array] = Q["cursorTargets", array]:add(array(BLB_n))
        
        local SLSB_n = Name + "ScrollBase"
        local SLSB_s = v(15,BLB_s[2]) * 0
        local SLSB_p = (BLB_s-SLSB_s)/2
        egpAddBox(SLSB_n, SLSB_p, SLSB_s, "")
        egpSetParent(BLB_n)
        egpSetColor(30)
        local SLS_n = Name + "Scroll"
        local SLS_s = v(SLSB_s[1],BLB_s[2]*1.0)
        local SLS_p = (SLS_s-SLSB_s)/2
        egpAddBox(SLS_n, SLS_p, SLS_s, "")
        egpSetParent(SLSB_n)
        egpSetColor(60)
        
        local BLS_n = Name + "select"
        local SLSB_s = v(BLB_s[1]-SLSB_s[1]-Indent,FontSize)
        local SLSB_p = (SLSB_s-BLB_s)/2
        egpAddBox(SLSB_n, SLSB_p, SLSB_s, "")
        egpSetParent(BLB_n)
        egpSetColor(0,80,255)
        Q[Name + "/select", number] = 0
        
        local BLT_n = Name + "Text"
        local BLT_s = v(SLSB_s[1],BLB_s[2])
        local BLT_p = v(Indent,0)-BLB_s/2
        egpAddTextLayout(BLT_n, BLT_n, BLT_p, BLT_s)
        egpSetParent(BLB_n)
        egpSetSize(FontSize)
        
        local T = ""
        for(C = 0,16) {
            T+="bone"+C+"\n"
        }
        egpSetText(BLT_n, T)
        
        
        
        local Name = "toolPanel"
        local TPB_n = Name + "Base"
        local TPB_s = v(800,200)
        local TPB_p = v(SCR[1]/2,SCR[2]-TPB_s[2]/2-Indent)
        egpAddBox(TPB_n, TPB_p, TPB_s, "")
        egpSetColor(255,80,0)
        egpAddBox(TPB_n + "/", v(), TPB_s-v(Indent), "")
        egpSetParent(TPB_n)
        egpSetColor(0)
        
        Q["cursorTargets", array] = Q["cursorTargets", array]:add(array(TPB_n))
        
        
        
        foreach(C, Ord:string = array("Pitch","Yaw","Roll")) {
            local X = C - 1
            
            
            local T_n = ""
            
            
            
            #Q[TPB_n + "/cursorTargets", array] = Q[TPB_n + "/cursorTargets", array]:add(array(T_n))
            #Q[T_n + "/act_n" , string] = Name + "Tool"
            #Q[T_n + "/actTag", string] = Ord
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }
    
    local KeyC = O:keyPressed("C")
    if(changed(KeyC) | KeyC) {
        
        local CursorPos = Q["cursorPos", vector2]
        if(changed(KeyC)) {
            
            Q["start", vector2] = v()
        }
        if(KeyC) {
            
            
            O:addPBA(13, ang(0,0,0), ang(10), ang(5.0), "1")
        }
        
        
        
        
        cursorPos(O)
        local CursorPos = Q["cursorPos", vector2]
        egpAddCircle("cursor", CursorPos, v(2), "o")
        
        local KeyClick = KeyC * O:keyPressed("E")
        if(changed(KeyClick) & KeyClick) {
            cursorTarget("cursorTargets")
            local CursorTarget = Q["cursorTarget", string]
            
            if(CursorTarget) {
                addAct(CursorTarget)
            }
        }
    }
    
    
    local Clear = array()
    foreach(Act_c, Act_i:number = Q["acts", array]) {
        
        local Act_n = Q[Act_i + "/act/name", string]
        local NoRemove = 0
        switch(Act_n) {
            case "bonesListBase",
                print(123)
                NoRemove = 0
            break
            case "",
                
            break
            case "",
                
            break
        }
        
        
        if(!NoRemove) {Clear = Clear:add(array(Act_c))}
    }
    foreach(C, Act_c:number = Clear) {
        Q["acts", array]:remove(Act_c)
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    local KeyKam = O:keyPressed("mouse_4")
    if(changed(KeyKam) & KeyKam) {
        local CamEnable = Q["cam/toggle", number] = !Q["cam/toggle", number]
        cameraToggle(0, CamEnable)
    }
    local CamEnable = Q["cam/toggle", number]
    if(CamEnable) {
        
        if(!cameraEntity(0)) {
            cameraCreate(0, vec(), ang())
            if(cameraEntity(0)) {
                local Cam_d = Q["cam/distance", number] if(!Cam_d | 1) {Cam_d = Q["cam/distance", number] = 52.5 * 1.0}
                local Cam_h = Q["cam/height"  , number] if(!Cam_h | 1) {Cam_h = Q["cam/height"  , number] = 52.5 * 0.1}
                local Cam_a = Q["cam/ang"     , angle ] if(!Cam_a) {Cam_a = Q["cam/ang"     , angle ] = O:eyeAngles() * ang(1,-1,1)}
                local Cam_p = Q["cam/pos"     , vector] if(!Cam_p) {Cam_p = Q["cam/pos"     , vector] = O:boxCenterW() + vec(0,0,Cam_h) - vec(Cam_d,0,0):rotate(Cam_a)}
                cameraToggle(0, 1)
                cameraPos(0, Cam_p)
                cameraAng(0, Cam_a)
            }
        }
        else {
            local Cam_d = Q["cam/distance", number]
            local Cam_h = Q["cam/height"  , number]
            local Cam_a = Q["cam/ang"     , angle ] = O:eyeAngles() * ang(1,-1,1)
            local Cam_p = Q["cam/pos"     , vector] = O:boxCenterW() + vec(0,0,Cam_h) - vec(Cam_d,0,0):rotate(Cam_a)    
            
            cameraPos(0, Cam_p)
            cameraAng(0, Cam_a)
        }
    }
}













































OPS = ops()






