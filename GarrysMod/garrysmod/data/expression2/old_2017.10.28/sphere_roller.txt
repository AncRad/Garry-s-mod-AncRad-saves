@name sphere roller

@inputs 
@outputs 
@persist [E O Pod]:entity [Q]:table

@trigger none
@model models/sprops/geometry/sphere_24.mdl



#include "AddHolo"
if(changed(0)) {
    
    E = entity()
    O = owner()
    
    local Model = E:model()
    local Rad = E:boxMax()[1]
    local Scale = vec(0.2,1,1) * 0.1
    
    addHolo("rt", vec(), vec(), ang(), vec(255), "tetra", "", "")
    addHoloINTO(E)
    
    local T = (1.0 + sqrt(5.0)) / 2.0
    local C = 0
    for(Plane = 1, 3) {
        for(Vert = 1, 4) {
            C++
            local X = C + ""
            local Color = vec(255,0,0)
            local V = vec(   mod(Vert,2) ? -1 : 1, Vert > 2 ? -T : T   ,0)
            if(Plane == 2) {
                V = V:rotate(ang(90,90,0))
                Color = vec(0,255,0)
                if(Vert == 1 | Vert == 4) {
                    Color = vec(255)
                    X = "this"
                }
            }
            elseif(Plane == 3) {
                V = V:rotate(ang(0,90,90))
                Color = vec(0,0,255)
            }
            Q["n", array] = Q["n", array]:add(array(X))
            local A = V:toAngle()
            addHolo(X, vec(), Scale, A, Color, Model, "", "rt")
            addHoloOffset(vec(Rad,0,0), ang())
        }
    }
    
    
    E:setAng(ang())
    E:propDraw(0)
    addHoloTimer("roller")
}

if(clk("roller")) {
        timer("roller", 50)
    
    if(changed(0)) {
        
        foreach(C, N:string = Q["n", array]) {
            local I = AddHolo
        }
    }
    
    
    local User = Pod:driver()
    if(Pod) {
        
    }
    else {
        findClearBlackList()
        findClearWhiteList()
        findIncludeClass("vehicle")
        findIncludeClass("pod")
        #findIncludeModel("models/nova/jeep_seat.mdl")
        #findSortByDistance(E:pos())
        #findIncludePlayerProps(O)
        findInSphere(E:pos(), 52.5 * 2000)
        Pod = find()
    }
    
    
    if(User) {
        if(changed(0)) {
            
            local CamRT = holoCreate(0, E:pos(), vec(), ang())
            #holoParent(0, E)
            cameraCreate(0, CamRT:toWorld(vec(-80,0,30)), CamRT:toWorld(ang()))
            cameraParent(0, CamRT)
        }
        
        local EyeAngles = angnorm(Pod:toLocal(User:eyeAngles()) - ang(0,90,0))
        holoAng(0, EyeAngles)
        holoPos(0, E:pos())
    }
    if(changed(User)) {
        cameraToggle(0, User | 0, Pod)
    }
}






























