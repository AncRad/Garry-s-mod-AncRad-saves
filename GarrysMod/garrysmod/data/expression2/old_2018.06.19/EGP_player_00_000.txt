@name EGP_player_00_000

@inputs 
@outputs 
@persist [E O EGP_e]:entity [EGP_w]:wirelink

@persist [User]:entity [EGP_resolution]:vector2

@trigger none
@model models/bull/gates/processor.mdl



if(changed(0)) {
    noDuplications()
    
    E = entity() E:setSkin(1)
    O = owner()
    User = O
    
    
    
    
    
    timer("egp", 1)
}

if(clk("egp")) {
        timer("egp", 50)
    
    if(changed(0)) {
        ################
        #
        #- first
        #
        #
        #- include
        #
        #include "EGPS"
        #
        #- function
        function egp_spawn_panel() {
            
            local Color1 = vec(0)
            local Color2 = vec(20)
            
            local Base_n = "panel"
            local Base_s = v(508)
            local Base_p = v(256)
            
            
            egpAddBox(Base_n, Base_s, Base_p)
            egpSetColor(Color1)
            egpClickMode()
            
            
            ####
            #trackPanel
            local TP_n = "trackPanel"
            local TP_s = v(Base_s[1],40)
            local TP_p = v(0,(TP_s-Base_s)[2]/2)
            egpAddBox(TP_n, TP_s, TP_p)
            egpSetColor(Color2)
            egpSetParent(Base_n)
            egpClickMode()
            #
            ####
            
            ####
            #globalPanel
            local GP_n = "globalPanel"
            local GP_s = v(Base_s[1],25)
            local GP_p = v(0,TP_p[2] + (TP_s+GP_s)[2] /2+2)
            egpAddBox(GP_n, GP_s, GP_p)
            egpSetColor(Color2)
            egpSetParent(Base_n)
            egpClickMode()
            #
            ####
            
            ####
            #app
            local AP_n = "appPanel"
            local AP_h = Base_s[2] - GP_s[2]/2 - 2  -(Base_s[2]/2+GP_p[2])  -0.1
            local AP_s = v(Base_s[1],AP_h)
            local AP_p = v(0,(Base_s[2]-AP_h)/2)
            egpAddBox(AP_n, AP_s, AP_p)
            egpSetColor(Color2)
            egpSetParent(Base_n)
            egpClickMode()
            #
            ####
        }
        function egp_spawn_panel_debugUser() {
            local Panel_P = EGP_resolution
            local Panel_offset = floor(Panel_P/256)
            
            egpAddText("debugUser", User:name(), Panel_P)
            egpSetAlign(Panel_offset)
            egpSetSize(15)
        }
        #
        #
        ################
    }
    
    if(!EGP_w) {
        
        local EW = E:isWeldedTo()
        local EW_t = EW:type()
        switch(EW_t) {
            case "gmod_wire_egp",
                EGP_e = EW
                EGP_w = EGP_e:wirelink()
                egpSelect(EGP_w)
                egpClear()
                
                EGP_resolution = v(512)
                
                egp_spawn_panel()
                egp_spawn_panel_debugUser()
                
                
                egpAddCircle("cursor",v(1),v(256))
                egpAddText("cursorTarget","d",v())
                egpSetSize(10)
                egpSetParent("cursor")
                
            break
            default,
                
            break
        }
    }
    else {
        
        switch(EGP_e:type()) {
            case "gmod_wire_egp",
                
                if(User:aimEntity() == EGP_e) {
                    local AimPos = EGP_e:toLocal(User:aimPos())
                    
                    local CursorPos = v(256) + vec2(AimPos):rotate(90)*v(-1,1)/93.125*(EGP_resolution)
                    
                    egpSetPos("cursor", CursorPos)
                    
                    
                    
                    local Target = egpGetTarget(CursorPos, "")
                    if(changed(Target)) {
                        egpSetText("cursorTarget", Target)
                    }
                }
            break
            default,
                
            break
        }
    }
}



setName("EGP_player_00_000\nOPS: " + ops() + "\nCPU: " + round(cpuUsage()*1e6))



































































































































