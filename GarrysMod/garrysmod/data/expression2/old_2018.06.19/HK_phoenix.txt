@name HK_phoenix

@inputs [Base T1 T2 T3 Pod Root]:entity [Cam_w]:wirelink
@outputs HC F1 F2 F3
@persist [E O]:entity [Q]:table

@trigger none
@model models/bull/gates/processor.mdl



if(changed(0)) {
    
    runOnLast(1)
    E = entity() E:setSkin(1)
    O = owner()
    
    T1:soundPlay("loop1", 0, "ambient/levels/citadel/portal_beam_loop1.wav") soundVolume("loop1", 0) soundPitch("loop1", 0)
    T2:soundPlay("loop2", 0, "ambient/levels/citadel/portal_beam_loop1.wav") soundVolume("loop1", 0) soundPitch("loop1", 0)
    T3:soundPlay("loop3", 0, "ambient/levels/citadel/portal_beam_loop1.wav") soundVolume("loop1", 0) soundPitch("loop1", 0)
    
    Root:propNotSolid(1)
    Q["HC", number] = 9
    timer("", 1)
}


if(clk("")) {
        timer("", 1)
    
    #####     User
    local User = Pod:driver()
    
    # cam
    local EYE = angnorm(Pod:toLocal(User:eyeAngles()) - ang(0,90,0))
    
    # keys
    local W_key = User:keyPressed("w")
    local A_key = User:keyPressed("a")
    local S_key = User:keyPressed("s")
    local D_key = User:keyPressed("d")
    local Space_key = User:keyPressed("space")
    local Shift_key = User:keyPressed("lshift")
    local Alt_key = User:keyPressed("lalt")
    
    
    #####     Camera
    if(changed(User)) {
        #ifdef cameraToggle(number, number, entity)
            cameraToggle(1, User|0, Pod)
        #else
            Cam_w["Activated", number] = User|0
        #endif
    }
    if(User) {
        
        local CamRoot = Q["camRoot", entity]
        if(CamRoot) {
            
            holoAng(0, EYE)
        }
        else {
            CamRoot = Q["camRoot", entity] = holoCreate(0, Root:boxCenterW(), vec(), Root:angles())
            holoParent(0, Root)
            #ifdef cameraToggle(number, number, entity)
                cameraCreate(1, CamRoot:toWorld(vec(-170,0,45)), CamRoot:toWorld(ang(0,0,0)))
                cameraParent(1, CamRoot)
                cameraToggle(1, User|0, Pod)
            #else
                Cam_w["Position" , vector] = CamRoot:toWorld(vec(-170,0,45))
                Cam_w["Angle"    , angle ] = CamRoot:toWorld(ang(0,0,0))
                Cam_w["Parent"   , entity] = CamRoot
                Cam_w["Activated", number] = User|0
            #endif
        }
    }
    
    
    #####     Values
    local Ang    = Base:angles()
    local AngVel = Base:angVel()
    local Vel    = Base:vel()
    local VelL   = Base:velL()
    #
    #
    local Ang_p = Ang[1]
    local Ang_y = Ang[2]
    local Ang_r = Ang[3]
    
    local AngVel_p = AngVel[1]
    local AngVel_y = AngVel[2]
    local AngVel_r = AngVel[3]
    
    local Ang_dif = angnorm(EYE[2]-Ang_y)
    #local Ang_dif_cos = cos(Ang_dif)
    #local Ang_dif_sin = sin(Ang_dif)
    #local Ang_dif_cos = abs(Ang_dif_cos)^2*sign(Ang_dif_cos)
    #local Ang_dif_sin = abs(Ang_dif_sin)^2*sign(Ang_dif_sin)
    local NeedVel = Q["needVel", vector]
    local NeedVel = NeedVel + ((vec(W_key-S_key,A_key-D_key,Space_key-Alt_key) * vec(750,350,125) * (Shift_key ? vec(2.5,2,2) : vec(1))) - NeedVel)/1.5 Q["needVel", vector] = NeedVel
    local NeedVel = NeedVel:rotate(ang(0,Ang_dif,0))
    #local NeedVel = NeedVel:rotate(ang(0,EYE[2],0))
    #local NeedVel = vec(NeedVel[1]*Ang_dif_cos+NeedVel[2]*Ang_dif_sin,NeedVel[2]*Ang_dif_cos-NeedVel[1]*Ang_dif_sin,NeedVel[3])
    #
    #
          Vel_z = Vel[3] - NeedVel[3]
    
    local VelL_x = VelL[1] - NeedVel[1]
    local VelL_y = VelL[2] - NeedVel[2]
    
    
    
    #####     Control
    # height
          HC = Q["HC", number]
    local HC = clamp(HC - clamp( Vel_z / 10 + $Vel_z * 5 ,-1.5,1.5)  ,0,30) Q["HC", number] = HC
    local HF = clamp(HC - clamp(Vel_z / 1,-6,6) ,0,35)
    
    # velocity
    local VC_x = sin(clamp(VelL_x/4,-90,90)) * 30
    local VC_y = sin(clamp(VelL_y/4,-90,90)) * 70
    
    # rotation
    
    local RC_x = 0.00 + sin(clamp( clamp(AngVel_r/3,-90,90)+clamp(Ang_r-VC_y       ,-90 , 90) ,-90,90))
    local RC_y = 0.46 + sin(clamp( AngVel_p/3+clamp(Ang_p            ,-90 , 90 ),-90,90))
    local RC_z =        sin(clamp((AngVel_y/1.8+clamp(-Ang_dif*(User|0),-150,150))*1.5,-90,90)) * 15
    
    
    #####     forces
    local F = HF * 408
    local F = F / 3
          F1 = F * (1 + RC_y * 0.5 - RC_x)
          F2 = F * (1 + RC_y * 0.5 + RC_x)
          F3 = F * (1 - RC_y * 1.0       )
    
    #####     angles
    local R = -VC_x
    local R1 = R + RC_z
    local R2 = R - RC_z
    local R3 = R
    
    
    
    #####     Apply
    for(C = 1, 3) {
        local T = select(C, T1, T2, T3)
        local F = select(C, F1, F2, F3)
        local R = select(C, R1, R2, R3)
        
        local A = (R - T:angles()) * 10 - T:angVel() * 0.8
        T:applyAngForce(ang(A[1] * T:mass(),0,0))
        
        T:applyForce(T:up() * F)
        
        local Sound = Q["sound"+C, number]
        local Sound = Sound + (F-Sound)/8 Q["sound"+C, number] = Sound
        local Vol = Sound/1200
        local Pit = Sound/7/120*60
        soundVolume("loop"+C, Vol) soundPitch("loop"+C, Pit)
    }
    
    
    
    
    
    
    
    setName("HK_phoenix\nOPS: " + ops() + "\nCPU: " + floor(cpuUsage() * 1e6) + "\n")
}














if(last()) {
    setName("HK_phoenix")
}



























