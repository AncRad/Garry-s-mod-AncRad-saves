@name EGPS

@persist [EGPS]:table [EGPS_w]:wirelink

@persist [EGPS_indexCounter] [EGPS_freeIndexes EGPS_groupOpen]:array

@persist [EGPS_lastName]:string [EGPS_lastIndex]

@persist [EGPS_cursorPos]:vector2



if(changed(0)) {
    #######################################################################
    ######################                       ##########################
    ###################### EXTENDED EXPRESSION 2 ##########################
    ######################                       ##########################
    #######################################################################
    ################(
    #
    #- ARRAY OPERATIONS
    #
    #
    #- GET INDEX
    #
    function number array:getIndex([Value Delimiter]:string) {
        if(!Delimiter) {Delimiter = "\n#\n"}
        local Concat = This:concat(Delimiter)
        local Find = (Delimiter + Concat + Delimiter):find(Delimiter + Value + Delimiter)
        
        if(!Find) {return 0}
        return Concat:left(Find):explode(Delimiter):count()
    }
    function number array:getIndex(Value:string) {
        return This:getIndex(Value, "")
    }
    #
    #- 
    #
    function array:removeValue([Value Delimiter]:string) {
        local Index = This:getIndex(Value, Delimiter)
        if(Index) {
            This:remove(Index)
        }
        #return This
    }
    function array:removeValue(Value:string) {
        This:removeValue(Value, "")
    }
    #
    ################)
    
    
    
    ################(
    #
    #- VECTOR FUNCTIONS
    #
    #
    #- VECTOR 2
    #
    function vector2 v([X Y]:number) {
        return vec2(X,Y)
    }
    function vector2 v(XY:number) {
        return vec2(XY)
    }
    function vector2 v() {
        return vec2()
    }
    function vector2 s([X Y]:number) {
        return vec2(X,Y) * EGPS["egp/scrResolution", vector2]
    }
    function vector2 s(XY:number) {
        return vec2(XY) * EGPS["egp/scrResolution", vector2]
    }
    #
    #- VECTOR 3
    #
    function vector v([X Y Z]:number) {
        return vec(X,Y,Z)
    }
    #
    #- VECTOR 4
    #
    function vector4 v([R G B A]:number) {
        return vec4(R,G,B,A)
    }
    function vector4 v([RG]:vector2, [B A]:number) {
        return vec4(RG[1],RG[2],B,A)
    }
    function vector4 v([R G]:number, [BA]:vector2) {
        return vec4(R,G,BA[1],BA[2])
    }
    function vector4 v([V1 V2]:vector2) {
        return vec4(V1, V2)
    }
    #
    ################)
    
    
    
    #######################################################################
    ######################                       ##########################
    ######################     EXTENDED EGP 3    ##########################
    ######################                       ##########################
    #######################################################################
    ################(
    #
    #- EGP SELECT
    #
    function egpSelect(W:wirelink) {
        EGPS_w = W
        
        EGPS["egp/scrResolution", vector2] = egpScrSize(owner())
    }
    function number egpSelect() {
        local E_WT = entity():isWeldedTo()
        if(E_WT) {
            egpSelect(E_WT:wirelink())
            return 1
        }
        return 0
    }
    #
    #- EGP CLEAR
    #
    function egpClear() {
        EGPS:clear()
        EGPS_w:egpClear()
    }
    #
    ################)
    
    
    
    ################(
    #
    #- REMOVE ELEMENT
    #
    function egpRemoveElement(E_n:string) {
        local E_T = EGPS[E_n + "/table", table]
        local E_i = E_T["index", number]
        
        foreach(C, ParentType:string = E_T["parentTypes", array]) {
            local P_n = E_T[ParentType + "/parent", string]
            if(P_n) {
                local P_T = EGPS[P_n + "/table", table]
                EGPS[P_n + "/table", table][ParentType + "/childList", array]:removeValue(E_n)
                EGPS[P_n + "/table", table] = P_T
            }
            elseif(ParentType != "position") {
                EGPS[ParentType + "/childList", array]:removeValue(E_n)
            }
        }
        
        EGPS:remove(E_n + "/table")
        EGPS_freeIndexes:pushNumber(E_i)
        
        EGPS_w:egpRemove(E_i)
    }
    #
    ################)
    
    
    ################(
    #
    #- GROUP
    #
    #- OPEN
    #
    function egpGroupOpen(G_n:string) {
        if(!EGPS_groupOpen:getIndex(G_n)) {
            EGPS_groupOpen = EGPS_groupOpen:add(array(G_n))
        }
    }
    #
    #- CLOSE
    #
    function egpGroupClose(G_n:string) {
        EGPS_groupOpen:removeValue(G_n)
    }
    #
    #- CLEAR
    #
    function egpGroupClear(G_n:string) {
        foreach(C, E_n:string = EGPS[G_n + "/egpGroup/array", array]) {
            #local E_T = EGPS[E_n + "/table", table] E_T["groups", array] = E_T["groups", array]:removeValue(G_n)
            EGPS[E_n + "/table", table]["groups", array]:removeValue(G_n)
        }
        EGPS[G_n + "/egpGroup/array", array] = array()
    }
    #
    #- REMOVE
    #
    function egpGroupRemove(G_n:string) {
        local G_a = EGPS[G_n + "/egpGroup/array", array]
        
        if(G_a:count()) {
            foreach(C, E_n:string = EGPS[G_n + "/egpGroup/array", array]) {
                egpRemoveElement(E_n)
            }
            EGPS[G_n + "/egpGroup/array", array] = array()
        }
    }
    #
    ################)
    
    
    ################(
    #
    #- EGP ADD
    #
    #
    #- GIVE FREE INDEX
    #
    function number egpGiveFreeIndex(E_n:string) {
        if(!E_n) {return 0}
        local Index = EGPS[E_n + "/table", table]["index", number]
        if(Index) {return Index}
        
        if(EGPS_freeIndexes:count()) {
            return EGPS_freeIndexes:removeNumber(1)
        }
        
        
        if(EGPS_indexCounter < egpMaxObjects()) {
            EGPS_indexCounter = EGPS_indexCounter + 1
            return EGPS_indexCounter
        }
        printColor(vec(255,75,0), "[EGPS] ", vec(255,0,0), " Закончились свободные индексы. ", vec(0,100,255), " \"" + E_n + "\"")
        return 0
    }
    #
    #= EGP ADD ELEMENT
    #
    function table:egpAddElement(E_n:string, E_i:number) {
        
        local Groups = array()
        foreach(C, G_n:string = EGPS_groupOpen) {
            Groups:pushString(G_n)
            EGPS[G_n + "/egpGroup/array", array] = EGPS[G_n + "/egpGroup/array", array]:add(array(E_n))
        }
        
        
        EGPS[E_n + "/table", table] = This:add(table(
            "name"        = E_n,
            "index"       = E_i,
            "groups"      = Groups,
            "parentTypes" = array("position")
        ))
        
        
        EGPS_lastName = E_n
        EGPS_lastIndex = E_i
        
        EGPS["position/childList", array] = EGPS["position/childList", array]:add(array(E_n))
    }
    #
    #
    #- BOX
    function number egpAddBox(E_n:string, [E_s E_p]:vector2, E_v:number) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            local E_v = clamp(int(E_v),0,3)
            table(
                "type"         = "box",
                "typeVariable" = E_v
            ):egpAddElement(E_n, E_i)
            
            
            
            switch(E_v) {
                case 0, EGPS_w:egpBox(              E_i,E_p,E_s) break
                case 1, EGPS_w:egpBoxOutline(       E_i,E_p,E_s) break
                case 2, EGPS_w:egpRoundedBox(       E_i,E_p,E_s) break
                case 3, EGPS_w:egpRoundedBoxOutline(E_i,E_p,E_s) break
            }
        }
        return E_i>0
    }
    function number egpAddBox(E_n:string, [E_s E_p]:vector2) {
        return egpAddBox(E_n,E_s,E_p,0)
    }
    #
    #
    #- CIRCLE
    function number egpAddCircle(E_n:string, [E_s E_p]:vector2, E_v:number) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            local E_v = clamp(int(E_v),0,1)
            table(
                "type"         = "circle",
                "typeVariable" = E_v
            ):egpAddElement(E_n, E_i)
            
            
            
            switch(E_v) {
                case 0, EGPS_w:egpCircle(       E_i,E_p,E_s) break
                case 1, EGPS_w:egpCircleOutline(E_i,E_p,E_s) break
            }
        }
        return E_i>0
    }
    function number egpAddCircle(E_n:string, [E_s E_p]:vector2) {
        return egpAddCircle(E_n,E_s,E_p,0)
    }
    #
    #
    #- TRIANGLE
    function number egpAddTriangle(E_n:string, [E_p1 E_p2 E_p3]:vector2, E_v:number) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            local E_v = clamp(int(E_v),0,1)
            table(
                "type"         = "triangle",
                "typeVariable" = E_v
            ):egpAddElement(E_n, E_i)
            
            
            
            switch(E_v) {
                case 0, EGPS_w:egpTriangle(       E_i,E_p1,E_p2,E_p3) break
                case 1, EGPS_w:egpTriangleOutline(E_i,E_p1,E_p2,E_p3) break
            }
        }
        return E_i>0
    }
    function number egpAddTriangle(E_n:string, [E_p1 E_p2 E_p3]:vector2) {
        return egpAddTriangle(E_n,E_p1,E_p2,E_p3,0)
    }
    #
    #
    #- WEDGE
    function number egpAddWedge(E_n:string, [E_s E_p]:vector2, E_v:number) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            local E_v = clamp(int(E_v),0,1)
            table(
                "type"         = "wedge",
                "typeVariable" = E_v
            ):egpAddElement(E_n, E_i)
            
            
            
            switch(E_v) {
                case 0, EGPS_w:egpWedge(       E_i,E_p,E_s) break
                case 1, EGPS_w:egpWedgeOutline(E_i,E_p,E_s) break
            }
        }
        return E_i>0
    }
    function number egpAddWedge(E_n:string, [E_s E_p]:vector2) {
        return egpAddWedge(E_n,E_s,E_p,0)
    }
    #
    #
    #- POLY
    function number egpAddPoly(E_n:string, E_pA:array, E_v:number) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            local E_v = clamp(int(E_v),0,1)
            table(
                "type"         = "poly",
                "typeVariable" = E_v
            ):egpAddElement(E_n, E_i)
            
            
            
            switch(E_v) {
                case 0, EGPS_w:egpPoly(       E_i,E_pA) break
                case 1, EGPS_w:egpPolyOutline(E_i,E_pA) break
            }
        }
        return E_i>0
    }
    function number egpAddPoly(E_n:string, E_pA:array) {
        return egpAddPoly(E_n,E_pA,0)
    }
    #
    #
    #
    #- TEXT
    function number egpAddText([E_n E_t]:string, E_p:vector2) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            table(
                "type" = "text"
            ):egpAddElement(E_n, E_i)
            
            
            EGPS_w:egpText(E_i,E_t,E_p)
        }
        return E_i>0
    }
    #- TEXT LAYOUT
    function number egpAddText([E_n E_t]:string, [E_s E_p]:vector2) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            table(
                "type" = "textLayout"
            ):egpAddElement(E_n, E_i)
            
            
            EGPS_w:egpTextLayout(E_i,E_t,E_p,E_s)
        }
        return E_i>0
    }
    #
    #
    #
    #- LINE
    function number egpAddLine(E_n:string, [E_p1 E_p2]:vector2) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            table(
                "type" = "line"
            ):egpAddElement(E_n, E_i)
            
            
            EGPS_w:egpLine(E_i,E_p1,E_p2)
        }
        return E_i>0
    }
    #- LINE STRIP
    function number egpAddLine(E_n:string, E_pA:array) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            table(
                "type" = "lineStrip"
            ):egpAddElement(E_n, E_i)
            
            
            EGPS_w:egpLineStrip(E_i,E_pA)
        }
        return E_i>0
    }
    #
    #
    #
    #- VERTICES
    function number egpAddVertices(E_n:string, E_pA:array) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            table(
                "type" = "vertices"
            ):egpAddElement(E_n, E_i)
            
            
            EGPS_w:egpAddVertices(E_i,E_pA)
        }
        return E_i>0
    }
    #
    #
    #
    #- 3D TRACKER
    function number egpAdd3DTracker(E_n:string, E_p:vector) {
        local E_i = egpGiveFreeIndex(E_n)
        
        if(E_i) {
            
            
            table(
                "type" = "3DTracker"
            ):egpAddElement(E_n, E_i)
            
            
            EGPS_w:egp3DTracker(E_i,E_p)
        }
        return E_i>0
    }
    #
    ################)
    
    
    
    ################(
    #
    #- SET FUNCTIONS
    #
    #
    #- PARENT
    function egpSetParent([E_n P_n]:string) {
        local E_T = EGPS[E_n + "/table", table]
        local E_i = E_T["index", number]
        
        if(E_i) {
            local P_T = EGPS[P_n + "/table", table]
            local P_i = P_T["index", number]
            
            if(P_i) {
                foreach(C, ParentType:string = E_T["parentTypes", array]) {
                    local LastP_n = E_T[ParentType + "/parent", string]
                    if(LastP_n) {
                        EGPS[LastP_n + "/table", table][ParentType + "/childList", array]:removeValue(E_n)
                    }
                    else { #elseif(ParentType == "position") {
                        EGPS[ParentType + "/childList", array]:removeValue(E_n)
                    }
                    P_T[ParentType + "/childList", array] = P_T[ParentType + "/childList", array]:add(array(E_n))
                    E_T[ParentType + "/parent", string] = P_n
                }
                
                EGPS_w:egpParent(E_i,P_i)
                return
            }
        }
        print("error#egpSetParent#" + E_n + "#to#" + P_n)
    }
    function egpSetParent(P_n:string) {
        egpSetParent(EGPS_lastName, P_n)
    }
    #
    #
    #- POS
    function egpSetPos(E_n:string, E_p:vector2) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpPos(E_i,E_p)
        }
        else {
            print("error#egpSetPos#" + E_n)
        }
    }
    function egpSetPos(E_p:vector2) {
        egpSetPos(EGPS_lastName,E_p)
    }
    #
    #
    #- ANG
    function egpSetAng(E_n:string, E_a:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpAngle(E_i,E_a)
        }
        else {
            print("error#egpSetAng#" + E_n)
        }
    }
    function egpSetAng(E_a:number) {
        egpSetAng(EGPS_lastName,E_a)
    }
    #
    #
    #- SIZE
    function egpSetSize(E_n:string, E_s:vector2) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpSize(E_i,E_s)
        }
        else {
            print("error#egpSetSize#" + E_n)
        }
    }
    function egpSetSize(E_s:vector2) {
        egpSetSize(EGPS_lastName,E_s)
    }
    function egpSetSize(E_n:string, E_s:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpSize(E_i,E_s)
        }
        else {
            print("error#egpSetSizeNum#" + E_n)
        }
    }
    function egpSetSize(E_s:number) {
        egpSetSize(EGPS_lastName,E_s)
    }
    #
    #
    #- MATERIAL
    function egpSetMaterial(E_n:string, E_m:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpMaterial(E_i,E_m)
        }
        else {
            print("error#egpSetMaterial#" + E_n)
        }
    }
    function egpSetMaterial(E_m:string) {
        egpSetMaterial(EGPS_lastName,E_m)
    }
    #
    #
    #- COLOR
    function egpSetColor(E_n:string, RGB:vector) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpColor(E_i,RGB)
        }
        else {
            print("error#egpSetColor#" + E_n)
        }
    }
    function egpSetColor(RGB:vector) {
        egpSetColor(EGPS_lastName, RGB)
    }
    function egpSetColor(E_n:string, RGB:number) {
        egpSetColor(E_n, vec(RGB))
    }
    function egpSetColor(RGB:number) {
        egpSetColor(EGPS_lastName,vec(RGB))
    }
    function egpSetColor(E_n:string, [R G B]:number) {
        egpSetColor(E_n, vec(R,G,B))
    }
    function egpSetColor([R G B]:number) {
        egpSetColor(EGPS_lastName, vec(R,G,B))
    }
    function egpSetColor(E_n:string) {
        egpSetColor(E_n, vec())
    }
    function egpSetColor() {
        egpSetColor(EGPS_lastName, vec())
    }
    #
    #
    #- ALPHA
    function egpSetAlpha(E_n:string, E_a:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpAlpha(E_i,E_a)
        }
        else {
            print("error#egpSetAlpha#" + E_n)
        }
    }
    function egpSetAlpha(E_a:number) {
        egpSetAlpha(EGPS_lastName, E_a)
    }
    function egpSetAlpha(E_n:string) {
        egpSetAlpha(E_n, 0)
    }
    function egpSetAlpha() {
        egpSetAlpha(EGPS_lastName, 0)
    }
    #
    #
    #- COLOR & ALPHA
    function egpSetColor(E_n:string, RGBA:vector4) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpColor(E_i,RGBA)
        }
        else {
            print("error#egpSetColor#" + E_n)
        }
    }
    function egpSetColor([RGBA]:vector4) {
        local LastName = EGPS_lastName
        egpSetColor(LastName, RGBA)
    }
    function egpSetColor(E_n:string, [R G B A]:number) {
        egpSetColor(E_n, vec4(R,G,B,A))
    }
    function egpSetColor([R G B A]:number) {
        local LastName = EGPS_lastName
        egpSetColor(LastName, vec4(R,G,B,A))
    }
    function egpSetColor(E_n:string, [RGB A]:number) {
        egpSetColor(E_n, vec4(RGB,RGB,RGB,A))
    }
    function egpSetColor([RGB A]:number) {
        local LastName = EGPS_lastName
        egpSetColor(LastName, vec4(RGB,RGB,RGB,A))
    }
    function egpSetColor(E_n:string, RGB:vector, A:number) {
        egpSetColor(E_n, vec4(RGB[1],RGB[2],RGB[3],A))
    }
    function egpSetColor(RGB:vector, A:number) {
        local LastName = EGPS_lastName
        egpSetColor(LastName, vec4(RGB[1],RGB[2],RGB[3],A))
    }
    #
    #
    #- TEXT
    function egpSetText(E_n:string, E_t:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpSetText(E_i,E_t)
        }
        else {
            print("error#egpSetText#" + E_n)
        }
    }
    function egpSetText(E_t:string) {
        egpSetText(EGPS_lastName, E_t)
    }
    #
    #
    #- ALIGN
    function egpSetAlign(E_n:string, [E_ah E_av]:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpAlign(E_i,E_ah,E_av)
        }
        else {
            print("error#egpSetAlign#" + E_n)
        }
    }
    function egpSetAlign([E_ah E_av]:number) {
        egpSetAlign(EGPS_lastName, E_ah, E_av)
    }
    function egpSetAlign(E_hv:vector2) {
        egpSetAlign(EGPS_lastName, E_hv[1], E_hv[2])
    }
    #
    #
    #- FONT
    function egpSetFont([E_n E_f]:string, E_fs:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpFont(E_i,E_f,E_fs)
        }
        else {
            print("error#egpSetFont#" + E_n)
        }
    }
    function egpSetFont(E_f:string, E_fs:number) {
        egpSetFont(EGPS_lastName, E_f, E_fs)
    }
    function egpSetFont([E_n E_f]:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpFont(E_i,E_f)
        }
        else {
            print("error#egpSetFont#" + E_n)
        }
    }
    function egpSetFont(E_f:string) {
        egpSetFont(EGPS_lastName, E_f)
    }
    #
    #
    #- 3D TRACKER
    function egpSet3DTracker(E_n:string, E_p:vector) {
        local E_T = EGPS[E_n + "/table", table]
        local E_i = E_T["index", number]
        if(E_i) {
            if(E_T["type", string] == "3DTracker") {
                
                
                EGPS_w:egp3DTracker(E_i,E_p)
            }
            else {
                print("error#egpSet3DTracker2#" + E_n)
            }
        }
        else {
            print("error#egpSet3DTracker1#" + E_n)
        }
    }
    function egpSet3DTracker(E_p:vector) {
        egpSet3DTracker(EGPS_lastName, E_p)
    }
    #
    #
    #- FIDELITY
    function egpSetFidelity(E_n:string, E_f:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpFidelity(E_i,E_f)
        }
        else {
            print("error#egpSetFidelity#" + E_n)
        }
    }
    function egpSetFidelity(E_f:number) {
        egpSetFidelity(EGPS_lastName,E_f)
    }
    #
    #
    #- RADIUS
    function egpSetRadius(E_n:string, E_r:number) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            EGPS_w:egpRadius(E_i,E_r)
        }
        else {
            print("error#egpSetRadius#" + E_n)
        }
    }
    function egpSetRadius(E_r:number) {
        egpSetRadius(EGPS_lastName,E_r)
    }
    #
    #
    #- ORDER
    function egpSetOrder([E1_n E2_n]:string, AddOrder:number) {
        local E1_i = EGPS[E1_n + "/table", table]["index", number]
        local E2_T = EGPS[E2_n + "/table", table]
        local E2_i = E2_T["index", number]
        if(E1_i & E2_i) {
            
            
            local E2_o = E2_T["order", number]
            if(!E2_o) {E2_o = EGPS_w:egpOrder(E2_i)}
            
            local E1_o = E2_o + AddOrder
            
            EGPS[E1_n + "/table", table]["order", number] = E1_o
            EGPS_w:egpOrder(E1_i,E1_o)
        }
        else {
            print("error#egpSetOrder#" + E1_n + "#" + E2_n)
        }
    }
    function egpSetOrder(E2_n:string, AddOrder:number) {
        egpSetOrder(EGPS_lastName,E2_n,AddOrder)
    }
    #
    ################)
    
    
    
    ################(
    #
    #- GET FUNCTIONS
    #
    #
    #- INDEX
    #
    function number egpGetIndex(E_n:string) {
        return EGPS[E_n + "/table", table]["index", number]
    }
    #
    #- PARENT
    function string egpGetParent(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            local P_i = EGPS_w:egpParent(E_i)
            return EGPS[P_i + "/table", table]["name", string]
        }
        else {
            print("error#egpGetParent#" + E_n)
            return ""
        }
    }
    function array egpGetChild(E_n:string) {
        local E_T = EGPS[E_n + "/table", table]
        if(E_T != table()) {
            
            return E_T["child", array]
        }
        else {
            print("error#egpGetChild#" + E_n)
            return array()
        }
    }
    #
    #
    #- POS
    function vector2 egpGetPos(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpPos(E_i)
        }
        else {
            print("error#egpGetPos#" + E_n)
            return vec2()
        }
    }
    function vector2 egpGetGlobalPos(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            local E_p = EGPS_w:egpPos(E_i)
            local P_i = EGPS_w:egpParent(E_i)
            while(P_i) {
                local Next = EGPS_w:egpParent(P_i)
                E_p = EGPS_w:egpPos(P_i) + E_p:rotate(EGPS_w:egpAngle(P_i) * (Next ? 1 : -1))
                P_i = Next
            }
            
            return E_p
        }
        else {
            print("error#egpGetGlobalPos#" + E_n)
            return vec2()
        }
    }
    #
    #
    #- ANG
    function number egpGetAng(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpAngle(E_i)
        }
        else {
            print("error#egpGetAng#" + E_n)
            return 0
        }
    }
    function number egpGetGlobalAng(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            local E_a = EGPS_w:egpAngle(E_i)
            local P_i = EGPS_w:egpParent(E_i)
            while(P_i) {
                E_a = angnorm(EGPS_w:egpAngle(P_i)-E_a)
                P_i = EGPS_w:egpParent(P_i)
            }
            
            return E_a
        }
        else {
            print("error#egpGetGlobalAng#" + E_n)
            return 0
        }
    }
    #
    #
    #- SIZE
    function vector2 egpGetSize(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpSize(E_i)
        }
        else {
            print("error#egpGetSize#" + E_n)
            return vec2()
        }
    }
    function number egpGetSizeNum(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpSizeNum(E_i)
        }
        else {
            print("error#egpGetSizeNum#" + E_n)
            return 0
        }
    }
    #
    #
    #- MATERIAL
    function string egpGetMaterial(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpMaterial(E_i)
        }
        else {
            print("error#egpGetMaterial#" + E_n)
            return ""
        }
    }
    #
    #
    #- COLOR
    function vector egpGetColor(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpColor(E_i)
        }
        else {
            print("error#egpGetColor#" + E_n)
            return vec()
        }
    }
    function vector4 egpGetColor4(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpColor4(E_i)
        }
        else {
            print("error#egpGetColor4#" + E_n)
            return vec4()
        }
    }
    #
    #
    #- ALPHA
    function number egpGetAlpha(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpAlpha(E_i)
        }
        else {
            print("error#egpGetAlpha#" + E_n)
            return 0
        }
    }
    #
    #
    #- FIDELITY
    function number egpGetFidelity(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpFidelity(E_i)
        }
        else {
            print("error#egpGetFidelity#" + E_n)
            return 0
        }
    }
    #
    #
    #- RADIUS
    function number egpGetRadius(E_n:string) {
        local E_i = EGPS[E_n + "/table", table]["index", number]
        if(E_i) {
            
            
            return EGPS_w:egpRadius(E_i)
        }
        else {
            print("error#egpGetRadius#" + E_n)
            return 0
        }
    }
    #
    #
    #- ORDER
    function number egpGetOrder(E_n:string) {
        local E_T = EGPS[E_n + "/table", table]
        local E_i = E_T["index", number]
        if(E_i) {
            
            
            local E_o = E_T["order", number]
            if(!E_o) {E_o = EGPS_w:egpOrder(E_i)}
            
            return E_o
        }
        else {
            print("error#egpGetOrder#" + E_n)
            return 0
        }
    }
    #
    #
    #- TYPE
    function string egpGetType(E_n:string) {
        local E_T = EGPS[E_n + "/table", table]
        local E_i = E_T["index", number]
        if(E_i) {
            
            return E_T["type", string]
        }
        else {
            print("error#egpGetType#" + E_n)
            return ""
        }
    }
    #
    #
    #- INRANGE
    function number egpGetInrange(E_n:string, Vector2:vector2) {
        local E_T = EGPS[E_n + "/table", table]
        local E_i = E_T["index", number]
        if(E_i) {
            
            local E_t = E_T["type", string]
            switch(E_t) {
                    #
                    #
                    #
                case "box",
                    local E_s = EGPS_w:egpSize(E_i) / 2
                    
                    return inrange(Vector2,-E_s,E_s)
                break
                    #
                    #
                    #
                case "circle",
                    local E_s = EGPS_w:egpSize(E_i)
                    if(abs(abs(E_s[1])-abs(E_s[2])) >= 10 | !inrange(abs(E_s[1]/E_s[2]),0.9,1.1)) {print("error#inrange circle#" + E_n)}
                    
                    return Vector2:length() <= E_s[1]
                break
                    #
                    #
                    #
                case "textLayout",
                    local E_s = EGPS_w:egpSize(E_i)
                    
                    return inrange(Vector2,vec2(),E_s)
                break
                    #
                    #
                    #
                default,
                    print("error#inrange#2#" + E_n)
                    return 0
                break
            }
        }
        else {
            print("error#inrange#1#" + E_n)
            return 0
        }
    }
    function number egpGlobalInrange(E_n:string, Vector2:vector2) {
        return egpGetInrange(E_n, Vector2 - egpGetGlobalPos(E_n))
    }
    
    function number egpLocalInrange(E_n:string, Vector2:vector2) {
        return egpGetInrange(E_n, Vector2 - egpGetPos(E_n))
    }
    #
    #
    #
    ################)
    
    
    
    ################(
    #
    #- CURSOR
    #
    #
    #- POS
    function vector2 entity:egpGetCursorPos_FOV90(CamAngles:angle) {
        local Player = This
        
        local EyeAngles  = Player:eyeAngles()
        local Eye        = Player:eye()
        if(CamAngles) {
            Eye = Eye:rotate(angnorm(EyeAngles-CamAngles))
        }
        if(changed(Eye) | changed(EyeAngles)) {
            local EyeA       = EyeAngles:forward()
            #local EgpScrSize = egpScrSize(Player) #vec2(1920,1080) #egpScrSize(Player)
            
            local Holo = holoEntity(454560)
            if(!Holo) {holoCreate(454560,vec(),vec())}
            holoAng(454560, EyeAngles)
            
            local Cos = Eye[1] * EyeA[1] + Eye[2] * EyeA[2] + Eye[3] * EyeA[3]
            local CursorV = (Holo:toLocal(Eye / Cos) / vec(1,-1.332,-0.75) + vec(0,1,1)) / 2
            local Cursor_p = vec2(CursorV[2], CursorV[3])
            local Cursor_p = round(Cursor_p,4) == vec2(0.5) ? vec2() : Cursor_p #* EgpScrSize
            EGPS_cursorPos = Cursor_p
            
            return Cursor_p
        }
        return EGPS_cursorPos
    }
    function vector2 entity:egpGetCursorPos_FOV90() {
        return This:egpGetCursorPos_FOV90(ang())
    }
    #
    #
    #- CLICK MODE
    function egpClickMode([E_n ParentType]:string) {
        local ParentType = "click#" + ParentType
        
        local E_T = EGPS[E_n + "/table", table]
        local P_n = E_T["position/parent", string]
        
        if(P_n) {
            EGPS[P_n + "/table", table][ParentType + "/childList", array] = EGPS[P_n + "/table", table][ParentType + "/childList", array]:add(array(E_n))
            local Index = EGPS[P_n + "/table", table]["parentTypes", array]:getIndex(ParentType)
            if(!Index) {
                EGPS[P_n + "/table", table]["parentTypes", array] = EGPS[P_n + "/table", table]["parentTypes", array]:add(array(ParentType))
            }
        }
        else {
            EGPS[ParentType + "/childList", array] = EGPS[ParentType + "/childList", array]:add(array(E_n))
        }
        EGPS[E_n + "/table", table][ParentType + "/parent", string] = P_n
        EGPS[E_n + "/table", table]["parentTypes", array] = EGPS[E_n + "/table", table]["parentTypes", array]:add(array(ParentType))
       # print(EGPS[E_n + "/table", table]["parentTypes", array])
    }
    function egpClickMode([ParentType]:string) {
        egpClickMode(EGPS_lastName,ParentType)
    }
    function egpClickMode() {
        egpClickMode(EGPS_lastName,"")
    }
    #
    #
    #- GET TARGET
    function string egpGetTarget(Cursor_p:vector2, [ParentType Target_n]:string) {
        local ParentType = "click#" + ParentType
        
        
        local Targets_a = EGPS[ParentType + "/childList", array]
        if(Target_n) {
            Targets_a = EGPS[Target_n + "/table", table][ParentType + "/childList", array]
        }
        local Targets_c = Targets_a:count()
        local C = 0
        while(C < Targets_c) {
            C++
            
            local E_n = Targets_a[C, string]
            if(egpGlobalInrange(E_n,Cursor_p)) {
                local E_T = EGPS[E_n + "/table", table]
                
                Target_n  = E_n
                Targets_a = E_T[ParentType + "/childList", array]
                Targets_c = Targets_a:count()
                C = 0
            }
        }
        return Target_n
    }
    function string egpGetTarget(Cursor_p:vector2, ParentType:string) {
        return egpGetTarget(Cursor_p, ParentType, "")
    }
    #
    ################)
}











































































































































