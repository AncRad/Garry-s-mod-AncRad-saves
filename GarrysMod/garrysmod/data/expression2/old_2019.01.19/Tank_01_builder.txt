@name Tank_01_builder

@inputs [P Base]:entity
@outputs 
@persist [E O]:entity [Q Helper]:table Find:array Prop




if(changed(0)) {
    
    E = entity()
    O = owner()
    
    holoCreate(1,vec(),vec(),ang()) holoMaterial(1, "models/wireframe")
    
    
    
    ################{
    #
    #- helper
    #
    function entity helper_point(Point_n:string, [Point_p]:vector, [Point_s]:number) {
        local StartHolo_e = Helper[Point_n + "/entity", entity]
        if(!StartHolo_e) {
            if(holoCanCreate()) {
                local StartHolo_i = 0
                StartHolo_i = Helper[Point_n + "/index" , number] = Helper["indexCounter", number] = max(Helper["indexCounter", number] + 1 ,2281448)
                StartHolo_e = Helper[Point_n + "/entity", entity] = holoCreate(StartHolo_i, Point_p, vec(Point_s/6), ang(), vec(255), "models/editor/axis_helper.mdl")
            } else {return noentity()}
        } elseif(Point_p) {holoPos(Helper[Point_n + "/index", number], Point_p)}
        return StartHolo_e
    }
    function entity helper_beam([Beam_n PointStart_n PointEnd_n]:string, [Helper_color]:vector, Width:number) {
        local PointStart_e = Helper[PointStart_n + "/entity", entity]
        local PointEnd_e   = Helper[PointEnd_n   + "/entity", entity]
        if(PointStart_e & PointEnd_e & !Helper[Beam_n + "/beam/entity", entity]) {
            local Helper_e = PointStart_e:drawBeam("trails/physbeam",PointStart_e:pos(),PointEnd_e:pos(),Helper_color,254,Width)
            Helper_e:setBeamEndEnt(PointEnd_e)
            Helper[Beam_n + "/beam/entity", entity] = Helper_e
            return Helper_e
        }
        else {
            return noentity()
        }
    }
    #
    ################}
    
    
    
}

interval(50)

P1 = E:pos()
P2 = P:pos()

local Box = abs(P1-P2)

local Center = (P1+P2)/2
holoPos(1, Center)
holoScale(1, -Box/6/2)


local Key_find = O:keyPressed("pad_1")
if(changed(Key_find) & Key_find & findCanQuery()) {
    
    for(C = 1,Find:count()) {holoDelete(2000+C)}
    
    
    findIncludeModel("models/sprops/trans/miscwheels/tank25.mdl")
    local Count = findInBox(P1,P2)
    Find = findToArray()
    
    local C = 0
    while(perf() & C != Count) {
        C++
        
        local P = Find[C, entity]
        if(0) {
            Find:remove(C)
            C--
            Count--
        }
        else {
            local ID = 2000 + C
            holoCreate(ID,P:boxCenterW(),-P:boxSize()/12*1.1,P:angles(),vec(255), "hq_sphere")
            holoParent(ID,P)
            holoMaterial(ID,"models/wireframe")
        }
    }
    
    
    print("finded: " + Count)
}



local Key_build = O:keyPressed("pad_2")
if(changed(Key_build) & Key_build & Find:count() & Base) {
    
    if(Q["timer", number]) {
        Q["timer", number] = 0
    }
    else {
        Q["timer", number] = curtime() + 0
    }
}


Timer = Q["timer", number]
if(Timer) {
    if(Timer < curtime()) {
        
        if(changed(Q["timerTimerPrint", number])) {
            
            for(C = 1,Find:count()) {holoDelete(2000+C)}
            
            print("########## START ##########")
            
            Q["ropeCount", number] = 0
            Prop = 2
        }
        
        if(Q["timerBuild", number] < curtime()) {
            Q["timerBuild", number] = curtime() + 0.25
            
            local P = Find:entity(1)
            
            local Select = 4
            
            if(Select == 1) {
                
                #
                local RopeCount = 0
                RopeCount = Q["ropeCount", number] = Q["ropeCount", number] + 1
                local Rope_P1 = P:massCenter()
                local V = vec()
                if(P:getColor() == vec(255)) {
                    V = vec(16,0,0):rotate(-15,0,0)
                    V = V + vec(0,vec(16,0,0):rotate(0,45 * (RopeCount==1 ? 1 : -1),0)[2],0)
                }
                else {
                    V = vec(16,0,0):rotate(-45,0,0)
                    V = V + vec(0,vec(16,0,0):rotate(0,45 * (RopeCount==1 ? 1 : -1),0)[2],0)
                }
                
                local Rope_P2 = P:massCenter() + V
                helper_point("Rope_P1" + Prop            , Rope_P1, 5)
                helper_point("Rope_P2" + Prop + RopeCount, Rope_P2, 2)
                helper_beam("rope" + Prop + RopeCount,"Rope_P1" + Prop, "Rope_P2" + Prop + RopeCount, vec(255), 3)
                #P:ropeTo(Base,P:toLocal(Rope_P1),Base:toLocal(Rope_P2),0,0,2,"cable/cable",1) #cable/cable
                #print("prop: " + Prop + " step: " + RopeCount)
                if(RopeCount == 2) {
                    Q["ropeCount", number] = 0
                    Find:remove(1)
                    Prop++
                    if(!Find:count()) {
                        print("########## END ##########")
                        Q["timer", number] = 0
                    }
                }
                #
            }
            elseif(Select == 2) {
                
                local V = vec(16,0,0)
                local V0 = V1 = V2 = vec()
                if(P:getColor() == vec(255)) {
                    V0 = V:rotate(-15,0,0)
                    V1 = V0 - V:rotate(-15+30,0,0)
                    V2 = V0 - V:rotate(-15-30,0,0)
                }
                else {
                    V0 = V:rotate(-45,0,0)
                    V1 = V0 - V:rotate(-45+23,0,0)
                    V2 = V0 - V:rotate(-45-30,0,0)
                }
                local V12 = (V1+V2)/2
                local Rope_P1 = P:massCenter()
                local Rope_P2 = P:massCenter()+V12
                helper_point("V0" + Prop, P:massCenter()+V0, 5)
                helper_point("V1" + Prop, P:massCenter()+V1, 15)
                helper_point("V2" + Prop, P:massCenter()+V2, 15)
                helper_point("V3" + Prop, P:massCenter()+V12, 20)
                #P:ropeTo(Base,P:toLocal(Rope_P1),Base:toLocal(Rope_P2),V1:distance(V2)/2-V12:length(),0,2,"cable/cable",0) #cable/cable
                
                Prop++
                Find:remove(1)
                if(!Find:count()) {
                    print("########## END ##########")
                    Q["timer", number] = 0
                }
                #
            }
            elseif(Select == 3) {
                
                #
                local Type = 1 + (P:getColor() != vec(255))
                local A = ang(select(Type,-15,-45),0,0)
                local Axis = P:massCenter() + vec(16,0,0):rotate(A)
                local V = P:massCenter()+A:up()*25 #:rotate(-10,0,0)*50
                helper_point("axis" + Prop, Axis, 10)
                helper_point("center" + Prop, P:massCenter(), 10)
                helper_point("hydra" + Prop, V, 20)
                #local Hydra = propSpawn("models/sprops/geometry/sphere_6.mdl",V,ang(),1) Hydra:setColor(0,150,255)
                #P:setPos(P:massCenter()-(V-P:massCenter())*0.7)
                #Base:elasticTo(P,Base:toLocal(V),P:toLocal(P:massCenter()),150000,1000,300,"",0,0)
                
                Prop++
                Find:remove(1)
                if(!Find:count()) {
                    print("########## END ##########")
                    Q["timer", number] = 0
                }
                #
            }
            elseif(Select == 4) {
                
                #
                local Type = 1 + (P:getColor() != vec(255))
                local A = ang(select(Type,-15,-45),0,0)
                local Axis = P:massCenter() + vec(16,0,0):rotate(A)
                local V = P:massCenter()+A:up()*25 #:rotate(-10,0,0)*50
                helper_point("axis" + Prop, Axis, 10)
                helper_point("center" + Prop, P:massCenter(), 10)
                helper_point("hydra" + Prop, V, 20)
                #local Hydra = propSpawn("models/sprops/geometry/sphere_6.mdl",V,ang(),1) Hydra:setColor(0,150,255)
                #P:setPos(P:massCenter()-(V-P:massCenter())*0.7)
                #Base:elasticTo(P,Base:toLocal(V),P:toLocal(P:massCenter()),150000,1000,300,"cable/cable",6,0)
                
                P:setPos(P:massCenter() - (V-P:massCenter())*0.75)
                
                Prop++
                Find:remove(1)
                if(!Find:count()) {
                    print("########## END ##########")
                    Q["timer", number] = 0
                }
                #
            }
        }
    }
    else {
        #local TTP = Q["timerTimerPrint", number]
        if(Q["timerTimerPrint", number] < curtime()) {
            Q["timerTimerPrint", number] = curtime() + 1
            #print("timer: " + floor(Q["timer", number]-curtime()))
        }
    }
}


































