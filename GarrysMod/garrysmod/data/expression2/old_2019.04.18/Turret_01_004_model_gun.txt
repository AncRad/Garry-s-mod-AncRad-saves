@name Turret_01_004_model_gun

@inputs 
@outputs 
@persist [E O]:entity [T]:table

@persist Gun_lenght Radius
@persist [Gun0_e GunRT_e]:entity Gun1_i Gun_lastShootTime Gun_fire

#include "AddHolo"


if(changed(0)) {
    E = entity()
    O = owner()
    
    local Color1 = vec(255)
    local Mater1 = "phoenix_storms/OfficeWindow_1-1"
    
    local Scale = 1
    "local" Radius = 8 * Scale
    
    local Gun_z = 0
    
    local Cube_x = Radius/5
    local Gun_r = 1.0*Scale
    local Gun_r2 = Gun_r*0.75
    local Gun_l = Radius*0.95
    local Gun_l1 = Cube_x*1.3
    local Gun_l2 = Gun_l1*0.8
    local Gun_l3 = Gun_l2*0.2
    local Gun_l2 = Gun_l2-Gun_l3*2
    
    Gun_lenght = Gun_l*2-Gun_l3*1.5
    
    addHolo("gun0",vec(5,0,1),vec(),ang(),vec(),"cube","","bashnya") addHolo_INTO(E)
    addHolo("gun1",vec(),vec(),ang(),vec(),"cube","","gun0")
    addHolo("",vec(-Cube_x,0,0),vec(Gun_r,Gun_r,Gun_l1),ang(90,0,0),Color1,"hq_tube",Mater1,"gun0")
    addHolo("",vec(Gun_l1-Cube_x-Gun_l+Gun_l3,0,0),vec(Gun_r2,Gun_r2,Gun_l),ang(90,0,0),Color1,"hq_tube_thick",Mater1,"gun1")
    
    addHolo("gun2",vec(Gun_l1-Cube_x+Gun_l3,0,0),vec(Gun_r,Gun_r,Gun_l3),ang(90,0,0),Color1,"hq_tube",Mater1,"gun1")
    
    for(C = 1,2) {
        local Clip = Gun_r*0.5
        
        addHolo("gun2" + C,vec(0,0,Gun_l2+Gun_l3),vec(Gun_r,Gun_r,Gun_l2),ang(),Color1,"hq_tube",Mater1,"gun2")
        addHolo_clip(vec(),ang(0,C == 2 ? 180 : 0,0),Clip)
        
        #local Offset = Gun_r*cos(asin(Clip/Gun_r))
        local A1 = asin(Clip/Gun_r)
        local A2 = asin(Clip/(Gun_r*0.75))
        local Size = (Gun_r*cos(A1)-Gun_r*0.75*cos(A2))/2
        local Offset = (Gun_r*cos(A1)+Gun_r*0.75*cos(A2))/2*(C==1 ? 1 : -1)
        addHolo("",vec(0,Offset,0),vec(Clip/0.9,Gun_l2/0.85,Size),ang(0,0,C==1 ? 90 : -90),Color1,"hq_stube_thin",Mater1,"gun2" + C)
        addHolo_clip(vec(),ang(0,90,0),-Gun_l2)
        addHolo_clip(vec(),ang(0,270,0),-Gun_l2)
        
        addHolo_clip(vec(-Clip,0,-Size*1.1),ang(-45,0,0),0)
        addHolo_clip(vec( Clip,0,-Size*1.1),ang(-135,0,0),0)
    }
    addHolo("gun3",vec(0,0,Gun_l3*2+Gun_l2*2),vec(Gun_r,Gun_r,Gun_l3),ang(),Color1,"hq_tube",Mater1,"gun2")
    addHolo("gunRT",vec(),vec(),ang(-90,0,0),vec(),"cube","","gun3")
    
    addHolo_timer("")
    addHolo_start()
}


if(clk("")) {
        timer("", 50)
    
    if(changed(0)) {
        function number smooth(Value:number) {
            return 0.5-sin(90 + clamp(Value,0,1) * 180)/2
        }
        function number smooth([Value IN TO]:number) {
            local Min = (IN < TO ? IN : TO)
            local Max = (TO > IN ? TO : IN)
            Value = clamp(Value,Min,Max)
            Value = clamp((Value-Min)/(Max-Min),0,1)
            return 0.5-sin(90 + Value * 180)/2
        }
        function gun_localSlide(Mul) {
            holoPos(Gun1_i, Gun0_e:toWorld(vec(Gun_lenght*Mul,0,0)))
        }
        
        Gun0_e = AddHolo["gun0/entity", entity]
        GunRT_e = AddHolo["gunRT/entity", entity]
        Gun1_i = AddHolo["gun1/index" , number]
        
        T["lastCurtime", number] = curtime()
    }
    local LastCurtime = T["lastCurtime", number]
    local Curtime     = curtime()
    T["lastCurtime", number] = Curtime
    local Interval    = Curtime - LastCurtime
    
    local Gun_fireRate_ms = 1/15
    
    
    Gun_fire = O:keyPressed("mouse_4")
    local Key_ = O:keyPressed("mouse_5")
    if(changed(Key_) & Key_) {T["gunStepNeed", number] = !T["gunStepNeed", number]}
    
    local GunStepNeed = T["gunStepNeed", number]
    local GunStepReal = T["gunStepReal", number]
    switch(GunStepReal) {
        case 0,
            T["gunStepReal", number] = GunStepNeed >= 1
        break
        case 1,
            local Real = T["gunStep1_real", number]
            local Need = GunStepNeed >= 1
            
            if(Need != Real & !Gun_lastShootTime) {
                Real = T["gunStep1_real", number] = clamp(Real + (Need ? 1 : -1)*Interval/1.1 ,0,1)
                local Smooth = smooth(Real)
                
                gun_localSlide(Smooth)
            }
            elseif(GunStepNeed != GunStepReal) {
                T["gunStepReal", number] = T["gunStepReal", number] + sign(GunStepNeed - GunStepReal)
            }
            if(Real == 1) {
                if(Gun_lastShootTime) {
                    local Time = Curtime-Gun_lastShootTime
                    local Slide = clamp(Time/0.04,0,1)
                    if(Time >= Gun_fireRate_ms) {
                        Gun_lastShootTime = 0
                        Slide = 1
                    }
                    gun_localSlide(0.8 + 0.2 * Slide ^ 1.2)
                }
                if(Gun_fire & !Gun_lastShootTime) {
                    local Mul = random(1)
                    #ifdef entity:shootTo(vector,vector,number,number,number,string)
                        local Gun0_P = Gun0_e:pos()
                        
                        Gun0_e:shootTo(Gun0_P,Gun0_e:forward(),0.025,0.2+0.5*Mul,6.5+1.5*Mul,"") #randint(4)==1 ? "Tracer" : ""
                        #entity:shootTo(vector start,vector dir,number spread,number force,number damage,string effect)
                        GunRT_e:effectSpawn("MuzzleEffect", GunRT_e:toWorld(vec(-Radius/4, Radius/6,0)), vec(), (-Gun0_e:right()):toAngle(), Radius/16)
                        GunRT_e:effectSpawn("MuzzleEffect", GunRT_e:toWorld(vec(-Radius/4,-Radius/6,0)), vec(), ( Gun0_e:right()):toAngle(), Radius/16)
                        GunRT_e:soundPlay("shoot",1,"NPC_FloorTurret.Shoot") soundPitch("shoot", 80) soundVolume("shoot", 1) #NPC_FloorTurret.Shoot #NPC_CeilingTurret.Shoot
                        
                        gun_localSlide(0.8)
                        Gun_lastShootTime = Curtime
                        Gun_fire = max(Gun_fire-1,0)
                    #else
                        if(changed(0)) {printColor(vec(255,80,0),"[p] ",vec(255)," shootTo  "}
                        Gun_lastShootTime = 0
                        Gun_fire = 0
                    #endif
                }
            }
        break
    }
}



























































