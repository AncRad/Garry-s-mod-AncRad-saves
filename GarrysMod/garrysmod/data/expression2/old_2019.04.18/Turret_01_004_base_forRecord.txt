@name Turret_01_004_base_forRecord

@inputs 
@outputs Find:array

@persist [SWEP_user SWEP_user_crowbar SWEP_body]:entity [SWEP_status]:string SWEP_getLock    [SWEP_rt_i SWEP_base_i SWEP_user_rhand_i SWEP_user_chest_i]:number [SWEP_rt_e SWEP_base_e SWEP_user_rhand_e SWEP_user_chest_e Turret_base_e Turret_gun2_e]:entity  [SWEP_g]:gtable

@persist [CC]:table [Commands]:array

@persist [RadarRotor_e Camera_e]:entity [AlphaProps]:array [Check_alphaMaterials_t Check_alphaModels_t]:table

@persist [Target_e]:entity [Target_P]:vector Target_detected

@persist [PB_base_e PB_bash_e PB_radar_e PB_camera_e]:entity
@persist [SpawnQueye DT]:table PropsBoxs_toggle
@persist 



@persist 

@model models/sprops/trans/wheel_a/wheel15.mdl




if(changed(0)) {
    #include "Turret_01_004_model"
    #- start
    addHolo_timer("gun2", "swep", 1)
    addHolo_timer("targetSistem", 1)
    addHolo_timer("findSistem", 1)
    addHolo("cam0",vec(),vec(),ang(),vec(),"cube","","neck2")
    addHolo("cam",vec(-33,0,0),vec(),ang(),vec(),"cube","","cam0")
    addHolo("swep_rhand",vec(),vec(),ang(),vec(),"cube","","rt") addHolo_unshift()
    addHolo("swep_chest",vec(),vec(),ang(),vec(),"cube","","rt") addHolo_unshift()
    addHolo_start()
    
    entity():setModel("models/sprops/misc/fittings/cubinder_1_5_to_1_5.mdl")
    function entity:runOnDamage(N:number) {
        #ifdef runOnDamage(number,entity)
            runOnDamage(N, This)
        #endif
    }
    function propsBoxs_toggle(Toggle) {
        foreach(C, Prop:entity = PropsBoxs) {
            Prop:propNotSolid(!Toggle)
            Prop:runOnDamage(Toggle)
        }
        PropsBoxs_toggle = Toggle
    }
    function turret_off() {
            T = T:merge(table(
                "bashnyaStepNeed" = 0,
                "cameraStepNeed" = 0,
                "radarStepNeed" = 0,
                "baseStepNeed" = 0,
                "gunStepNeed" = 0
            ))
            Target_e = noentity()
            Target_detected = 0
            Gun_fire = 0
        }
        function turret_on() {
            T = T:merge(table(
                "bashnyaStepNeed" = 1,
                "cameraStepNeed" = 1,
                "radarStepNeed" = 1,
                "baseStepNeed" = 4,
                "gunStepNeed" = T["gunAttack", number]
            ))
            Gun_fire = 0
        }
        function turret_attack() {
            T["gunStepNeed", number] = T["bashnyaStepNeed", number]
            T["gunAttack", number] = 1
            Gun_fire = 0
        }
        function turret_noAttack() {
            T["gunStepNeed", number] = 0
            T["gunAttack", number] = 0
            Gun_fire = 0
        }
        function number entity:to(TO:string) {
            if(!This:isPlayer()) {return 0}
            local LastSWEP_status = SWEP_status
            
            local SID = This:steamID()
            if(TO == "rhand") {
                if(SWEP_g[SID + "/rhand/entity", entity]) {return 0}
                
                local Crow = This:weapon()
                if(Crow:type() != "weapon_crowbar") {return 0}
                
                if(!SWEP_user_rhand_e) {
                    SWEP_user_rhand_e = holoCreate(SWEP_user_rhand_i,vec(),vec(-0.4),ang()) holoVisible(SWEP_user_rhand_i, players(), 0) holoVisible(SWEP_user_rhand_i, owner(), 1)
                }
                holoPos(SWEP_user_rhand_i, SWEP_user:attachmentPos("anim_attachment_rh"))
                holoAng(SWEP_user_rhand_i, SWEP_user:attachmentAng("anim_attachment_rh"))
                holoParentAttachment(SWEP_user_rhand_i, SWEP_user, "anim_attachment_rh")
                
                #holoPos(SWEP_base_i, SWEP_user_rhand_e:toWorld(vec()))
                #holoAng(SWEP_base_i, SWEP_user_rhand_e:toWorld(ang()))
                local LocalAng = (Turret_base_e:toLocal(Turret_gun2_e:angles())-ang(0,90,0)):rotateAroundAxis(vec(0,1,0),25)
                holoAng(SWEP_base_i, SWEP_user_rhand_e:toWorld(LocalAng))
                holoPos(SWEP_base_i, SWEP_user_rhand_e:toWorld(vec(0.7,-0.25,0)-(Turret_base_e:toLocal(Turret_gun2_e:pos())+vec(0.5,0,0)):rotate(LocalAng)))
                
                holoParent(SWEP_base_i, SWEP_user_rhand_e)
                
                SWEP_g[SID + "/rhand/entity", entity] = SWEP_user_rhand_e
                SWEP_user_crowbar = Crow
                SWEP_status = "rhand"
            }
            elseif(TO == "chest") {
                if(SWEP_g[SID + "/chest/entity", entity]) {return 0}
                
                if(!SWEP_user_chest_e) {
                    SWEP_user_chest_e = holoCreate(SWEP_user_chest_i,vec(),vec(-0.4),ang()) holoVisible(SWEP_user_chest_i, players(), 0) holoVisible(SWEP_user_chest_i, owner(), 1)
                }
                holoPos(SWEP_user_chest_i, SWEP_user:attachmentPos("chest"))
                holoAng(SWEP_user_chest_i, SWEP_user:attachmentAng("chest"))
                holoParentAttachment(SWEP_user_chest_i, SWEP_user, "chest")
                
                holoPos(SWEP_base_i, SWEP_user_chest_e:toWorld(vec(-8,0,-2)))
                holoAng(SWEP_base_i, SWEP_user_chest_e:toWorld(ang(-90,0,0)))
                holoParent(SWEP_base_i, SWEP_user_chest_e)
                
                SWEP_g[SID + "/chest/entity", entity] = SWEP_user_chest_e
                SWEP_status = "chest"
            }
            elseif(TO == "drop") {
                
                local SWEP_user_rt_e = LastSWEP_status == "rhand" ?  SWEP_user_rhand_e : SWEP_user_chest_e
                SWEP_body:propFreeze(0)
                SWEP_body:setAng(toWorldAng(vec(),ang(0,0,90),vec(),SWEP_base_e:angles()))
                SWEP_body:setPos(SWEP_rt_e:toWorld(SWEP_rt_e:toLocal(SWEP_base_e:pos() + SWEP_body:boxCenter()))) #+ SWEP_body:boxSize()[2]/2
                SWEP_body:setVel(SWEP_user:vel())
                
                holoPos(SWEP_base_i, SWEP_rt_e:toWorld(vec()))
                holoAng(SWEP_base_i, SWEP_rt_e:toWorld(ang()))
                holoParent(SWEP_base_i, SWEP_rt_e)
                
                turret_off()
                SWEP_status = "drop"
            }
            elseif(TO == "put") {
                
                local Norm = SWEP_user:aimNormal()
                local Pos = SWEP_user:aimPos()
                local EYE = SWEP_user:eye()
                
                #local Ang = EYE:rotateAroundAxis(EYE:cross(Norm),90-acos(Norm:dot(-EYE))):toAngle()
                
                SWEP_body:setAng(toWorldAng(vec(),ang(0,0,90),vec(),quat(Norm:cross(SWEP_user:eye()):cross(Norm),Norm):toAngle()))
                SWEP_body:setPos(SWEP_rt_e:toWorld(SWEP_rt_e:toLocal(Pos + Norm*SWEP_body:boxSize()[2]/2 + SWEP_body:boxCenter())))
                SWEP_body:propFreeze(1)
                
                holoPos(SWEP_base_i, SWEP_rt_e:toWorld(vec()))
                holoAng(SWEP_base_i, SWEP_rt_e:toWorld(ang()))
                holoParent(SWEP_base_i, SWEP_rt_e)
                
                T["gunStepNeed", number] = T["gunAttack", number] ? T["bashnyaStepNeed", number] : 0
                
                SWEP_status = "put"
            }
            else {
                return 0
            }
            
            local LastSWEP_status_rhand = LastSWEP_status == "rhand"
            local LastSWEP_status_chest = LastSWEP_status == "chest"
            if(LastSWEP_status_rhand | LastSWEP_status_chest) {SWEP_g:removeEntity(SID + "/" + (LastSWEP_status_rhand ? "rhand" : "chest") + "/entity")}
            #if(LastSWEP_status_rhand | LastSWEP_status_chest) {SWEP_g[SID + "/" + (LastSWEP_status_rhand ? "rhand" : "chest") + "/entity", entity] = noentity()}
            local SWEP_status_inUser_changed = (SWEP_status == "rhand" | SWEP_status == "chest") - (LastSWEP_status == "rhand" | LastSWEP_status == "chest")
            if(SWEP_status_inUser_changed > 0) {
                SWEP_body:propFreeze(1)
                SWEP_body:propNotSolid(1)
            }
            elseif(SWEP_status_inUser_changed < 0) {
                #SWEP_body:propFreeze(0)
                SWEP_body:propNotSolid(0)
            }
            
            if(changed(LastSWEP_status_rhand)) {
                SWEP_user_crowbar:setAlpha(255*LastSWEP_status_rhand)
                SWEP_user_crowbar:drawShadow(LastSWEP_status_rhand)
            }
            propsBoxs_toggle(SWEP_status == "drop" | SWEP_status == "put")
            SWEP_getLock = curtime() + 0.409
            SWEP_user = SWEP_status == "drop" ? noentity() : This
            return 1
        }
        
        
        
        function vector entity:getTargetPos(Type:string) {
            switch(Type) {
                case "box", return This:boxCenterW()
                case "mass", return This:massCenter()
                case "chest", return This:attachmentPos("chest")
                case "anim_attachment_head", return This:attachmentPos("anim_attachment_head")
                case "anim_attachment_rh", return This:attachmentPos("anim_attachment_rh")
                case "anim_attachment_lh", return This:attachmentPos("anim_attachment_lh")
                #case "chest", return This:
                default, return This:pos()
            }
        }
        function vector entity:getTargetPos() {
            local Target_P = vec()
            if(This:isPlayer() | This:isNPC()) {
                Target_P = This:attachmentPos("anim_attachment_head")
                if(!Target_P) {
                    Target_P = This:attachmentPos("chest")
                }
            }
            if(!Target_P) {
                Target_P = This:boxCenterW()
            }
            return Target_P
        }
        function number entity:checkVisible([StartPos EndPos]:vector) {
            if(!This) {return 0}
            while(perf(80)) {
                rangerFilter(AlphaProps)
                local R = rangerOffsetHull(StartPos,EndPos,vec(1),vec(5))
                local Ranger_e = R:entity()
                if(!Ranger_e | Ranger_e == This) {return Ranger_e == This}
                local Transparent = Ranger_e:getAlpha() < 240
                if(!Transparent) {
                    local Ranger_e_m = Ranger_e:getMaterial()
                    if(Ranger_e_m) {
                        Transparent = Check_alphaMaterials_t:exists(Ranger_e_m) | Ranger_e_m:find("glass") | Ranger_e_m:find("effect")
                    }
                    else {
                        local Ranger_e_m = Ranger_e:model()
                        Transparent = Check_alphaModels_t:exists(Ranger_e_m) | Ranger_e_m:find("glass") | Ranger_e_m:find("window") | Ranger_e_m:find("fence")
                    }
                }
                if(Transparent) {
                    AlphaProps:pushEntity(Ranger_e)
                    continue
                }
                return 0
            }
            return 0
        }
}

if(damageEntClk()) {
    local DamageEnt = damageEntClk()
    local DamageType = DamageEnt:getDamageType()
    local Body = DT["prop" + DamageEnt:id(), string]
    local Resist = DT[Body + "/resistance", table][DamageType, number]
    local Damage = DamageEnt:getDamage() * (Resist ? Resist : 0.7)
    if(DamageType=="claw" & DamageEnt:getAttacker() == SWEP_user) {Damage=0}
    
    local Body_D = DT[Body + "/damage", number]
    DT[Body + "/damage", number] = Body_D = Body_D + Damage
    
    if(Body_D >= 100) {
        if(Body == "radar") {
            if(AddHolo["radarRotor/entity", entity]) {
                AddHolo["radarRotor/entity", entity]:remove()
                Radar_findRadius = 0
            }
        }
        elseif(Body == "base") {
            entity():remove()
        }
    }
    
    exit()
    exit()
}

if(chatClk(SWEP_user)) {
    if(changed(0)) {
        
        function addChatCommand(Command:string, Variables:array) {
            Commands:pushString(Command)
            CC[Command + "\variables", array] = Variables
        }
        
        addChatCommand("off", array("off", ""))
        addChatCommand("defend", array("defend", "def", ""))
        addChatCommand("attack", array("attack", ""))
        addChatCommand("noAttack", array("noattack", "no attack", " "))
    }
    
    local LS = SWEP_user:lastSaid():lower()
    
    
    if(LS:index(1) == "!" | LS:index(1) == "#") {
            hideChat(1)
        
        local Command = ""
        local LS = LS:sub(2)
        #local EX = LS:explode(" ")
        #local EX1 = EX[1, string]
        
        foreach(C, C_command:string = Commands) {
            if(CC[C_command + "\variables", array]:concat("#"):find(LS)) {
                Command = C_command
                print(LS + " == " + Command)
                break
            }
        }
        
        switch(Command) {
            case "off",
                turret_off()
            break
            case "defend",
                turret_on()
            break
            case "attack",
                turret_attack()
            break
            case "noAttack",
                turret_noAttack()
            break
            default,
                
            break
        }
    }
    exit()
}


#include "Turret_01_004_model"

if(clk("swep")) {
        timer("swep", 50)
    
    if(changed(0)) {
        SWEP_g = gTable("ancrad_swep01")
        
        Turret_base_e = AddHolo["base/entity", entity]
        Turret_gun2_e = AddHolo["gun2/entity", entity]
        SWEP_rt_e = AddHolo["rt/entity", entity]
        SWEP_base_e = AddHolo["base/entity", entity]
        
        SWEP_rt_i = AddHolo["rt/index", number]
        SWEP_base_i = AddHolo["base/index", number]
        SWEP_user_rhand_i = AddHolo["swep_rhand/index", number] ? AddHolo["swep_rhand/index", number] : 100501
        SWEP_user_rhand_e = holoEntity(SWEP_user_rhand_i)
        SWEP_user_chest_i = AddHolo["swep_chest/index", number] ? AddHolo["swep_chest/index", number] : 100502
        SWEP_user_chest_e = holoEntity(SWEP_user_chest_i)
        
        SWEP_body = entity()
        SWEP_body:setAlpha(0)
        SWEP_body:drawShadow(0)
        SWEP_body:propFreeze(0)
        SWEP_body:propNotSolid(0)
        SWEP_status = "drop"
        
        runOnLast(1)
        runOnChat(1)
        
        if(owner():keyUse()) {
            owner():to("chest") | owner():to("rhand") turret_attack()
        }
        else {
            turret_on() turret_attack() SWEP_user = owner()
        }
    }
    
    local SWEP_status_changed = changed(SWEP_status)
    local SWEP_status_rhand = SWEP_status == "rhand"
    local SWEP_status_chest = SWEP_status == "chest"
    local SWEP_status_inUser = SWEP_status_rhand | SWEP_status_chest
    
    if(SWEP_status_changed) {
        if(SWEP_status_inUser) {
            turret_off()
        }
    }
    
    if(SWEP_status_rhand) {
        if(!SWEP_user:isAlive() | SWEP_user:inVehicle() | SWEP_user:playerIsRagdoll()) {
            SWEP_user:to("drop")
        }
        elseif(SWEP_user:weapon():type() != "weapon_crowbar") {
            if(SWEP_user:keyUse()) {
                SWEP_user:to("chest")
            }
            else {
                SWEP_user:to("drop")
            }
        }
        else {
            local Key_dubinator = SWEP_user:keyAttack2()
            if(changed(Key_dubinator) & Key_dubinator) {
                T["gunStepNeed", number] = !T["gunStepNeed", number]
            }
            
            local Key_attack = SWEP_user:keyAttack1()
            if(Key_attack & SWEP_user:aimPos():distance(SWEP_user:shootPos()) < 75) {
                if(SWEP_user:keyUse() & (SWEP_getLock - curtime() <= 0)) {
                    
                    SWEP_user:to("put")
                    
                }
                elseif(Key_attack & (T["dubinatorLock", number] - curtime() <= 0)) {
                    
                    local Force = 0.5+T["gunStep1_real", number]*0.5
                    
                    local E = SWEP_user:aimEntity()
                    if(E:isPlayer()) {
                        E:setVel(SWEP_user:eye()*Force*52.5*10)
                    }
                    else {
                        E:applyOffsetForce(SWEP_user:eye()*Force*52.5*75*10,SWEP_user:aimPos())
                    }
                    
                    T["dubinatorLock", number] = curtime() + 0.409
                }
            }
            elseif(changed(T["gunStep1_real", number]) + changed(T["bashnyaStep1_neckReal", number]) + changed(T["bashnyaRoot_localAng", angle])) {
                local LocalAng = (Turret_base_e:toLocal(Turret_gun2_e:angles())-ang(0,90,0)):rotateAroundAxis(vec(0,1,0),25)
                holoAng(SWEP_base_i, SWEP_user_rhand_e:toWorld(LocalAng))
                holoPos(SWEP_base_i, SWEP_user_rhand_e:toWorld(vec(0.7,-0.25,0)-(Turret_base_e:toLocal(Turret_gun2_e:pos())+vec(0.5,0,0)):rotate(LocalAng)))
            }
        }
    }
    elseif(SWEP_status_chest) {
        local Crow = SWEP_user:weapon():type() == "weapon_crowbar"
        if(changed(Crow) & Crow) {
            if(SWEP_user:keyUse()) {
                SWEP_user:to("rhand")
            }
        }
    }
    elseif(SWEP_status == "put") {
        
        local Distance = 52.5 * 1.5
        if(SWEP_user:keyAttack1() & SWEP_user:keyUse() & SWEP_user:aimEntity() == SWEP_body & (SWEP_user:aimPos():distance(SWEP_user:shootPos()) <= Distance) & (SWEP_getLock - curtime() <= 0)) {
            SWEP_user:to("rhand")
        }
    }
    elseif(SWEP_status == "drop") {
        
        local Distance = 52.5 * 1.5
        findIncludeClass("player")
        findInSphere(SWEP_body:pos(), Distance)
        foreach(C, P:entity  = findToArray()) {
            if(P:keyAttack1() & P:keyUse() & P:aimEntity() == SWEP_body & (P:aimPos():distance(P:shootPos()) <= Distance) & (SWEP_getLock - curtime() <= 0)) {
                if(P:to("rhand")) {break} else {}
            }
        }
    }
    exit()
}


if(clk("findSistem")) {
        timer("findSistem", 350)
    
    if(changed(0)) {
        
        Check_alphaMaterials_t = table(
            "phoenix_storms/airboat_blur02"=0,
            "phoenix_storms/fender_white"=0,
            "phoenix_storms/glass"=0
        )
        
        
        RadarRotor_e = AddHolo["radarRotor/entity", entity]
        Camera_e = AddHolo["camera/entity", entity]
        
    }
    
    if(findCanQuery()) {
        local Radar = T["radarStepReal", number]
        local Camera = 0 #T["cameraStepNeed", number]
        if(Radar | Camera) {
            
            findClearBlackList()
            findClearWhiteList()
            findIncludeModel("models/props_c17/oildrum001.mdl")
            findIncludeClass("player")
            findIncludeClass("npc")
            
            findExcludeClass("npc_rollermine")
            findExcludeClass("npc_turret_ceiling")
            findExcludeClass("npc_combine_camera")
            findExcludeClass("npc_combinedropship")
            findExcludeClass("npc_combinegunship")
            findExcludeClass("npc_helicopter")
            findExcludeClass("npc_strider")
            findExcludeClass("npc_turret_floor")
            findExcludeClass("npc_crow")
            findExcludeClass("npc_pigeon")
            findExcludeClass("npc_seagull")
            findExcludeEntities(SWEP_user:steamFriends():add(array(SWEP_user)))
            
            if(Radar) {
                local Radar_P = RadarRotor_e:pos()
                local Radar_c = findInSphere(Radar_P, Radar * Radar_findRadius)
                findSortByDistance(Radar_P)
                T["find/radar_c", number] = Radar_c
            }
            Find = findToArray()
        }
    }
    else {
        print("find can not query " + round(curtime(),3))
    }
    
    
    
    
    #pysbox system
    #ifdef propSpawn(string,vector,angle,number)
        if(changed(0)) {
            DT["prop" + entity():id(), string] = "base"
            #ifdef runOnDamage(number)
                runOnDamage(1)
            #endif
            function number propCanSpawnCreate() {
                #ifdef propCanSpawn()
                    return propCanSpawn()
                #endif
                #ifdef propCanCreate()
                    return propCanCreate()
                #endif
                return 0
            }
            DT=DT:merge(table(
                 "base/damage" = 0
                ,"base/resistance" = table("" = 0.5,"explosion" = 0.4,"burn"=0.05)
                ,"camera/damage" = 0
                ,"camera/resistance" = table("" = 0.5,"explosion" = 0.5,"burn"=0.1)
                ,"radar/damage" = 0
                ,"radar/resistance" = table("" = 0.5,"explosion" = 0.5,"burn"=0.1)
            ))
            SpawnQueye = table(
                 array(1, "base"  ,"base","models/sprops/trans/wheel_c/t_wheel15.mdl",vec(),ang(0,0,90))
                ,array(2, "base"  ,"bashnyaRoot","models/sprops/trans/wheel_c/t_wheel15.mdl",vec(0,0,0.5),ang(0,0,90))
                ,array(3, "radar" ,"radarRotor","models/sprops/cylinders/size_2/cylinder_3x3.mdl")
                #,array(4, "camera","cam1_1","models/sprops/cylinders/size_1/cylinder_1_5x3.mdl")
            )
        }
        if(SpawnQueye:exists(1) & propCanSpawnCreate()) {
            local DATA   = SpawnQueye:removeArray(1)
            local Index  = DATA[1, number]
            local Type   = DATA[2, string]
            local Parent = AddHolo[ DATA[3, string]+"/entity", entity]
            local Model  = DATA[4, string]
            local Pos    = Parent:toWorld(DATA[5, vector])
            local Ang    = Parent:toWorld(DATA[6, angle ])
            
            local Prop = propSpawn(Model, Pos, Ang, 1)
            Prop:setAlpha(0)
            Prop:drawShadow(0)
            Prop:parentTo(Parent)
            PropsBoxs:pushEntity(Prop)
            AlphaProps:pushEntity(Prop)
            #    if(Index==1) {PB_base_e   = Prop}
            #elseif(Index==2) {PB_bash_e   = Prop}
            #elseif(Index==3) {PB_radar_e  = Prop}
            #elseif(Index==4) {PB_camera_e = Prop}
            #ifdef noCollideAll(entity, number)
                noCollideAll(Prop, 1)
            #else
                #ifdef entity:noCollideAll(number)
                    Prop:noCollideAll(1)
                #endif
            #endif
            Prop:runOnDamage(PropsBoxs_toggle)
            DT["prop" + Prop:id(), string] = Type
        }
    #endif
    exit()
}

if(clk("targetSistem")) {
        timer("targetSistem", Target_detected ? 25 : 25)
    
    O = owner()
    holoAng(AddHolo["cam0/index", number], O:eyeAngles())
    local Key = O:keyPressed("mouse_4")
    if(changed(Key) & Key) {
        T["asd", number] = !T["asd", number]
        select(T["asd", number]+1,O,AddHolo["cam/entity", entity]):setViewEntity()
    }
    
    
    if(changed(0)) {
        T["targetSistem/lastCurtime", number] = curtime()
    }
    local LastCurtime = T["targetSistem/lastCurtime", number]
    local Curtime     = curtime()
    T["targetSistem/lastCurtime", number] = Curtime
    local Interval    = Curtime - LastCurtime
    
    
    if(!Target_detected) {
        local Ranger_SP = RadarRotor_e:pos()
        
        rangerPersist(1)
        rangerFilter(AlphaProps)
        local Count = Find:count()
        local C = 0
        while(perf(80) & C < Count) {
            C++
            local Find_e  = Find[C, entity]
            local Target_P = Find_e:getTargetPos()
            if(Find_e:checkVisible(Ranger_SP,Target_P)) {
                Target_e = Find_e
                Target_detected = 1
                RadarRotor_e:soundPlay("target_finded", 2, "buttons/button16.wav") soundVolume("target_finded", 0.3)
                break
            }
        }
        rangerPersist(0)
    }
    
    if(Target_detected) {
        if(Target_e & (!(Target_e:isNPC() | Target_e:isPlayer()) | Target_e:isAlive())) {
            local Target_visible = 0
            local CheckPos = Target_e:getTargetPos()
            
            local Ranger_SP = RadarRotor_e:pos()
            Target_visible = Ranger_SP:distance(CheckPos) < Radar_findRadius * 1.2 & Target_e:checkVisible(Ranger_SP,CheckPos)
            if(changed(Target_visible) & !Target_visible) {
                T["targetSistem/looseTarget", number] = curtime()
            }
            if(Target_visible) {
                Target_P = CheckPos
            }
            elseif((curtime() - T["targetSistem/looseTarget", number] >= 1.5)) {
                Target_e = noentity()
                Target_detected = 0
            }
        }
        else {
            Target_e = noentity()
            Target_detected = 0
        }
    }
    
    
    if(T["bashnyaStep1_real", number] == 1) {
        if(Target_detected) {
            local BR_lA_need = angnorm(Neck2_e:toLocal(Target_P   -Gun0_e:toWorld(vec(-Radius*2,0,0))+Neck2_e:pos()):toAngle())
            local BR_lA_real = Neck2_e:toLocal(Gun0_e:angles())
            #local LocalADDAng = clamp(angnorm(BR_lA_need-BR_lA_real)*0.8,-Interval*225,Interval*225)
            local LocalADDAng = clamp(angnorm(BR_lA_need-BR_lA_real)*0.98,-Interval*150,Interval*150)
            
            bash_localSetAng(BR_lA_real + LocalADDAng)
            if(rangerOffset(Gun0_e:pos(),Gun0_e:toWorld(vec(Radar_findRadius*1.25,0,0))):entity() == Target_e) {
                Gun_fire = 1 & T["gunStep1_real", number]
            }
        }
        else {
            local BR_lA_real = Neck2_e:toLocal(Gun0_e:angles())
            if(!inrange(BR_lA_real,ang(-0.1),ang(0.1))) {
                bash_localSetAng(BR_lA_real-ang(clamp(angnorm(BR_lA_real)*0.4,-Interval*225,Interval*225)[1],0,0))
            }
        }
    }
    exit()
}








if(last()) {
    if(SWEP_status == "rhand" | SWEP_status == "chest") {
        SWEP_user:to("drop")
    }
}
setName("Turret_01_004_base\nOPS: " + ops() + "\nCPU: " + floor(cpuUsage()*1e6))
