@name DC_system
@inputs P:wirelink
@persist Cam_on View_ang:angle View_pos:vector Shoot OPS Rocket_power Aim_pos:vector ASD:entity TEST:angle Grabb_relative1:entity Grabb_relative2:entity Grabb_pos1:vector Grabb_pos2:vector 
@persist Screams:array Vel_cc Fly Ass_id:bone L_hand_id:bone R_hand_id:bone L_fot_id:bone R_fot_id:bone Body_id:bone Head_id:bone For_speed Walk_pos:vector Walk_i Walk_ii Right_speed
@persist  RH_entity:entity M2_2 Fly2 Dir_home Iii M1 Swim_i Cam_on2 R

@outputs [O E Rag User]:entity [Q]:table MoveYaw GroundContact

@outputs Ragdolling_LockTime
@outputs Ragdolling_FindRagdoll
@outputs Ragdolling_UserPos:vector

@trigger none



interval(50)

if(changed(0)) {
    E = entity()
    O = owner()
    
    if(E:isWeldedTo():type() == "prop_ragdoll") {
        Rag = E:isWeldedTo()
        
        setName("DC_system\nрегдолл")
    }
    else {
        User = 0 ? findPlayerByName("") : O
        runOnLast(1)
        Rag = noentity()
        
        setName("DC_system\nигрок: " + User:name())
    }
}
local Key = User:keyPressed("R")
if(changed(Key) & Key & (Ragdolling_LockTime < curtime())) {
    Ragdolling_LockTime = curtime() + 1
    if(!Rag) {
        Ragdolling_FindRagdoll = curtime()
        Ragdolling_UserPos = User:pos()
    }
    local CMD = Rag ? "ulx unragdoll \""+User:name()+"\"" : "ulx ragdoll \""+User:name()+"\""
    concmd(CMD)
}

if(Ragdolling_FindRagdoll & !Rag & findCanQuery()) {
    findClearBlackList()
    findClearWhiteList()
    findInSphere(Ragdolling_UserPos, 52.5*100)
    local Find = findClosest(Ragdolling_UserPos)
    if(Find:type() == "prop_ragdoll" & Find:model() == User:model()) {
        Rag = Find
        Ragdolling_UserPos = vec()
        Ragdolling_FindRagdoll = 0
    }
}







if(changed(Rag) & Rag) {
    
    Rag:soundPlay(2,0,"vehicles/fast_windloop1.wav") soundPitch(2,0)
    if(0) {Rag:soundPlay(1,0,"npc/combine_soldier/vo/off3.wav")}
    
    L_hand_id = Rag:bone(7)
    R_hand_id = Rag:bone(5)
    L_fot_id = Rag:bone(13)
    R_fot_id = Rag:bone(14)
    Body_id = Rag:bone(1)
    Head_id = Rag:bone(10)
    Ass_id = Rag:bone(0)
    
    L_hand_id:setMass(3)
    R_hand_id:setMass(3)
    L_fot_id:setMass(10.7)
    R_fot_id:setMass(10.7)
    Body_id:setMass(22.4)
    Head_id:setMass(7)
    Ass_id:setMass(11)
    
    Screams[1, string] = "vo/npc/male01/hitingut01.wav"
    Screams[2, string] = "vo/npc/male01/hitingut02.wav"
    Screams[6, string] = "vo/npc/male01/myarm01.wav"
    Screams[7, string] = "vo/npc/male01/myarm02.wav"
    Screams[8, string] = "vo/npc/male01/mygut02.wav"
    Screams[9, string] = "vo/npc/male01/myleg01.wav"
    Screams[10, string] = "vo/npc/male01/myleg02.wav"
    Screams[11, string] = "vo/npc/male01/ow01.wav"
    Screams[12, string] = "vo/npc/male01/ow02.wav"
    Screams[13, string] = "vo/npc/male01/pain01.wav"
    Screams[14, string] = "vo/npc/male01/pain02.wav"
    Screams[15, string] = "vo/npc/male01/pain03.wav"
    Screams[16, string] = "vo/npc/male01/pain04.wav"
    Screams[17, string] = "vo/npc/male01/pain05.wav"
    Screams[18, string] = "vo/npc/male01/pain06.wav"
    Screams[5, string] = "vo/npc/male01/pain07.wav"
    Screams[4, string] = "vo/npc/male01/pain08.wav"
    Screams[3, string] = "vo/npc/male01/pain09.wav"
    
    
    #holoParent(1,Body_id)
    #holoParent(1,Rag,"beam_damage") 
}

if(Rag) {
    
    Rag:propFreeze(0)
    
    W = User:keyPressed("W")
    S = User:keyPressed("S")
    D = User:keyPressed("D")
    A = User:keyPressed("A")
    M1 = User:keyPressed("mouse_left")
    M2 = User:keyPressed("mouse_right")
    SPACE = User:keyPressed("space")
    CTRL = User:keySprint() #User:keyPressed("shift")
    SHIFT = User:keyDuck() #User:keyPressed("shift")
    
    EyeAngles = User:eyeAngles()
    ELE = EyeAngles[1]
    BEA = EyeAngles[2]
    AIMPUserS = User:aimPos()
    
    if(W|S|A|D) {
        MoveYaw = angnorm(MoveYaw + angnorm((vec(W-S,A-D,0):rotate(ang(0,EyeAngles[2],0)):toAngle():yaw() - MoveYaw)) / 4)
    }
    W = W|S|A|D
    S = A = D = 0
    
    SPEED = Rag:vel():length()
    rangerFilter(Rag)
    R2 = rangerOffset(5000,Body_id:pos(),View_ang:forward())
    Aim_pos = R2:position()
    
    ACC = SPEED-Vel_cc
    if(ACC>100) {Rag:soundPlay(0,0,Screams:string(randint(18)))}
    
    if(!User:keyUse()) {
        View_ang = angnorm(View_ang + angnorm(ang(ELE,BEA,0) - View_ang) / 4)
    }
    else {
        View_ang = ang(0,MoveYaw,0)
    }
    View_ang_yaw = ang(0,MoveYaw,0) #ang(0,BEA,0)
    rangerFilter(Rag)
    View_pos = Head_id:pos()+vec(0,0,5)-View_ang:forward()*(rangerOffset(Head_id:pos(),Head_id:pos()-View_ang:forward()*200):distance()-40)
    
    
    rangerFilter(Rag)
    rangerFilter(RH_entity)
    local RangerGround_D = 50
    RangerGround = rangerOffset(RangerGround_D,Rag:pos(),vec(0,0,-1))
    GroundOffset = 37
    RangerGround_dist = RangerGround:distance()
    
    if(Fly>0.1) {
        Fly-=0.05
        #DISTANCE = 30+Fly*40
    }
    else {
        #[
        DISTANCE = RangerGround:distance()
        if(DISTANCE>69 | ACC>220) {
            
            Fly = 1
            "RH_entity = noentity()"
        }
        ]#
    }
    
    
    #if((Rag:vel()-RangerGround:entity():vel()):length()<(100-Fly*49 + (1-GroundContact)*80) & RangerGround:hit()) {Fly-= 0.05 Fly2 = 0}
    
    if(1) {
        #local GroundContact_0 = RangerGround_dist - GroundOffset
        #local GroundContact_1 = abs(RangerGround_D - GroundOffset)
        #local GroundContact_2 = abs(GroundOffset - RangerGround_D)
        #GroundContact = clamp(1 - abs(GroundContact_0) / (GroundContact_0 < 0 ? GroundContact_1 : GroundContact_2) ,0,1)^0.5
        GroundContact = clamp(1 + (GroundOffset-RangerGround_dist)/20 ,0,1.5) #(GroundOffset-RangerGround_dist)/RangerGround_D
        #Ground = GroundBalance
        
        Body_id:applyForce(vec(0,0,2500*GroundContact)-Body_id:vel()*20*GroundContact*vec(1,1,0))
        
        
        #Head_id:applyForce(vec(0,0,GroundContact*10))
        if(M1 & !SHIFT)  {
            "rangerFilter(Rag)"
            "R2 = rangerOffset(5000,Rag:pos(),View_ang:forward())"
            if(!RH_entity & R2:entity() & R2:distance()<50) {
                RH_entity = R2:entity()
                Rag:soundPlay(0,0,Screams:string(4))
                
            }
            else {
                if(RH_entity:type() == "gmod_wire_button") {
                    #RH_entity:use()
                }
                Ipos = RH_entity:pos()+View_ang:forward()
                RH_entity:applyAngForce((-ang(RH_entity:elevation(Ipos),RH_entity:bearing(Ipos),RH_entity:angles():roll())*20 - RH_entity:angVel())*ang(1,1,0.2)*RH_entity:mass()/2)
                RH_entity:applyForce(((Head_id:pos()+Rag:vel()/14+View_ang:forward()*RH_entity:radius()-RH_entity:pos())*20-RH_entity:vel())*RH_entity:mass()/2)
                #RH_entity:propFreeze(0)
            }
            L_hand_id:applyForce(((-L_hand_id:pos()+Body_id:pos()+View_ang:forward()*22+View_ang:right()*11)*130-L_hand_id:vel()*8)*GroundContact*0)
            R_hand_id:applyForce(((-R_hand_id:pos()+Body_id:pos()+View_ang:forward()*22-View_ang:right()*11)*130-R_hand_id:vel()*8)*GroundContact*0)
        }
        else {
            RH_entity = noentity()
        }
    }
    
    if(SHIFT) {
        if(M2) {
            rangerFilter(Rag)
            if(Grabb_pos1 == vec()) {
                G1 = rangerOffset(30,L_hand_id:pos(),View_ang:forward())
                
                if(G1:hit())  {
                    Rag:soundPlay(0,0,Screams:string(2))
                    if(G1:entity()) {
                        Grabb_relative1 = G1:entity()
                        Grabb_pos1 = G1:entity():toLocal(G1:position())
                    }
                    else {
                        Grabb_pos1 = G1:position()
                        Grabb_relative1 = noentity()
                    }
                }
            }
            else {
                R_hand_id:applyForce((View_ang:up()*2500 - View_ang:right()*300)*!M1)
                if(Grabb_relative1) {
                    G_force = (Grabb_relative1:toWorld(Grabb_pos1) - L_hand_id:pos())*50 -L_hand_id:vel()*4 + Grabb_relative1:vel()*5
                    Grabb_relative1:applyOffsetForce(-G_force*14,L_hand_id:pos())
                }
                else {
                    G_force = (Grabb_pos1-L_hand_id:pos())*50 -L_hand_id:vel()*4
                }
                Body_id:applyForce(G_force*4-Body_id:vel()*10)
                L_hand_id:applyForce(G_force)
            }
        }
        else {
            Grabb_relative1 = noentity()
            Grabb_pos1 = vec()
        }
        
        if(M1) {
            rangerFilter(Rag)
            if(Grabb_pos2 == vec()) {
                G1 = rangerOffset(30,R_hand_id:pos(),View_ang:forward())
                if(G1:hit()) {
                    Rag:soundPlay(0,0,Screams:string(3))
                    if(G1:entity()) {
                        Grabb_relative2 = G1:entity()
                        Grabb_pos2 = G1:entity():toLocal(G1:position())
                    }
                    else {
                        Grabb_pos2 = G1:position()
                        Grabb_relative2 = noentity()
                    }
                }
            }
            else {
                if(Grabb_relative2) {
                    G_force = (Grabb_relative2:toWorld(Grabb_pos2) - R_hand_id:pos())*50 - R_hand_id:vel()*4 + Grabb_relative2:vel()*5
                    Grabb_relative2:applyOffsetForce(-G_force*14,R_hand_id:pos())
                }
                else {
                    G_force = (Grabb_pos2-R_hand_id:pos())*50 -R_hand_id:vel()*4
                }
                Body_id:applyForce(G_force*4-Body_id:vel()*10)
                R_hand_id:applyForce(G_force)
                L_hand_id:applyForce((View_ang:up()*2500 + View_ang:right()*300)*!M2)
            }
        }
        else
        {
            Grabb_pos2 = vec()
            Grabb_relative2 = noentity()
        }     
    }
    else {
        Grabb_pos2 = vec()
        Grabb_relative2 = noentity()
        Grabb_pos1 = vec()
        Grabb_relative1 = noentity()
    }
    if(W) {
        For_speed = min(For_speed+500,CTRL ? 2000 : 1500)
    }
    elseif(S) {
        For_speed = max(For_speed-500,CTRL ? -1700 : -1000)
    }
    else {
        For_speed = For_speed/1.3
        
    }
    if(Fly<0.2) {
        Body_id:applyForce(RangerGround:entity():vel()*50*vec(1,1,0.1)+(View_ang_yaw:forward()*For_speed*0.75    +(((L_fot_id:pos()+R_fot_id:pos())/2)-Body_id:pos()):setZ(0)*100+vec(0,0,4000*0))*GroundContact)
        ####//// ANCRAD ////####
        local User_EyeAngles = User:eyeAngles()
        #- HEAD
        local Body_yaw = toWorldAng(vec(),ang(90,0,0),vec(),Body_id:angles())[2]+90
        local NeedA = toWorldAng(vec(),ang(0,15,180),vec(),Body_id:angles()) + ang(User_EyeAngles[1],User_EyeAngles[2]-Body_yaw,0)
        local AngAcc = clamp( toLocalAng(vec(),NeedA,vec(),Head_id:angles()) ,ang(-30),ang(30))
        local QuatAcc = conj(quat(AngAcc))
        local VecAcc = -rotationVector(QuatAcc)
        Head_id:applyTorque((VecAcc*15-Head_id:angVelVector()*0.5)*Head_id:mass()*1)
        #- CHEST
        local NeedA = ang(-90,User_EyeAngles[2],-90) + ang(clamp(abs(User_EyeAngles[1])-60,0,30)*sign(User_EyeAngles[1])*1.5,0,0)
        local AngAcc = clamp( toLocalAng(vec(),NeedA,vec(),Body_id:angles()) ,ang(-30),ang(30))
        local QuatAcc = conj(quat(AngAcc))
        local VecAcc = -rotationVector(QuatAcc)
        Body_id:applyTorque((VecAcc*5-Body_id:angVelVector()*0.5)*Body_id:mass()*5*GroundContact)
        ####\\\\ ANCRAD ////####
        Walk_i+= For_speed/ (CTRL ? 70 : 40) #шаги
        
        Walk_pos = (View_ang_yaw:forward()*sin(Walk_i)*27+View_ang_yaw:up()*cos(Walk_i)*40)*(CTRL ? 1.2 : 1)
        L_fot_id:applyForce(GroundContact*7*(-L_fot_id:vel()*4+(Rag:pos()+vec(0,0,-40+For_speed/4000)-View_ang:right()*4+Walk_pos*(For_speed/2500)-L_fot_id:pos())*70)*abs(For_speed)/6000)
        R_fot_id:applyForce(GroundContact*7*(-R_fot_id:vel()*4+(Rag:pos()+vec(0,0,-40+For_speed/4000)+View_ang:right()*4-Walk_pos*(For_speed/2500)-R_fot_id:pos())*70)*abs(For_speed)/6000)
        
        L_fot_id:applyAngForce(ang(0,-sin(Walk_i)*1.75,0)*For_speed)
        R_fot_id:applyAngForce(ang(0,sin(Walk_i)*1.75,0)*For_speed)
        
        if(SPACE) {
            "Body_id:applyForce(vec(0,0,70000))"
            Body_id:applyForce(View_ang:forward()*10000+vec(0,0,17000))
        }
        
    }
    
    Vel_cc = Rag:vel():length()
    
    if(M2 & Rocket_power>0 & !SHIFT & !M1) {
            Rocket_power-= 0.001
        if(M2_2) {
            Rocket_power = 0
            M2_2 = 0
            Rag:setTrails(10,100,1,"trails/smoke",vec(255,255,255),255)
            Rag:soundPlay(3,0,"weapons/rpg/rocket1.wav")
        }
        Super_vec = View_ang:forward()*4000+vec(0,0,1000)
        L_hand_id:applyForce((Super_vec+View_ang:right()*500)*Rocket_power)
        R_hand_id:applyForce((Super_vec-View_ang:right()*500)*Rocket_power)
        Body_id:applyForce((Super_vec*8)*Rocket_power)
    }
    elseif(M2_2 == 0) {
        M2_2 = 1
        soundStop(3)
        Rag:removeTrails()
        holoPos(0,vec())
    }
    if(Rag) {
        Rocket_power = min(Rocket_power+0.02,1)
        soundPitch(2,min(SPEED/52.5/60,1)^2*200)
        soundVolume(2,min(SPEED/52.5/30,1)^2)
        soundPitch(3,min(100,Rocket_power*300))
    }
    else {
        soundPitch(2,0)
        soundVolume(2,0)
        soundPitch(3,0)
    }
    
    
    
    
    if(W) {
        rangerHitWater(1)   
        rangerHitEntities(0)   
        rangerIgnoreWorld(1)  
        R2 = rangerOffset(2,Rag:pos(),vec(0,0,-1))
        if(R2:hit()) {
            Swim_i+= 34
            Swim_pos1 = View_ang:forward()*sin(Swim_i)*35+View_ang:right()*cos(Swim_i)*20
            Swim_pos2 = View_ang:forward()*sin(Swim_i)*35-View_ang:right()*cos(Swim_i)*20
            R_hand_id:applyForce((-R_hand_id:pos()+Body_id:pos()-View_ang:right()*20 + Swim_pos1+View_ang:forward()*30)*110-R_hand_id:vel()*7)
            L_hand_id:applyForce((-L_hand_id:pos()+Body_id:pos()+View_ang:right()*20 + Swim_pos2+View_ang:forward()*30)*110-L_hand_id:vel()*7)
            
            L_fot_id:applyForce((-L_fot_id:pos()+Body_id:pos()-View_ang:right()*15 + Swim_pos1 - View_ang:forward()*10)*30-L_fot_id:vel()*2)
            R_fot_id:applyForce((-R_fot_id:pos()+Body_id:pos()+View_ang:right()*15 + Swim_pos2 - View_ang:forward()*10)*30-R_fot_id:vel()*2)
            Head_id:applyForce(View_ang:forward()*1000)
        }
    }
    
    
    if(!RangerGround:hit()) {
        Fly = 1
    }
}
TEST = Head_id:angles()





















































































