@name FUNCIONS_SORT_sortNonRepetitionIntegers
@inputs 
@outputs 
@persist 
@trigger 


function array array:sortNonRepetitionIntegers() {
    local Count = Value = This:count()
    local SortedIndexes = array()
    foreach(Index, Value:number = This) {SortedIndexes[Value, number] = Index}
    SortedIndexes:unshiftNumber(2281448) SortedIndexes:shift() # magic crap \ магическая дрисня
    This:clear()
    foreach(Value, Index:number = SortedIndexes) {This:pushNumber(Value)}
    return SortedIndexes
}
if(0) {
    function array array:sortNonRepetitionIntegers() {
        local Count = Value = This:count()
        local SortedIndexes = array()
        local Min = This:min() <= 0 ? 1-This:min() : 0
        foreach(Index, Value:number = This) {SortedIndexes[Value+Min, number] = Index}
        SortedIndexes:unshiftNumber(2281448) SortedIndexes:shift() # magic crap \ магическая дрисня
        This:clear()
        foreach(Value, Index:number = SortedIndexes) {This:pushNumber(Value-Min)}
        return SortedIndexes
    }
}


In = 0
To = 359
Def = array()
for(C = 1,20) {
    local N = randint(In,To)
    while(invert(Def):exists(""+N)) {N = randint(In,To)}
    Def:pushNumber(N)
}

print("+======================")
printTable(Def)
#Def:sortNumbers()
print("+======================")
printTable(Def:sortNonRepetitionIntegers())

#[
print(123)
printTable(Def)
Def = Def:sortNumbers()
print(123)
printTable(Def)
